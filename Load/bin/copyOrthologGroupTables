#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use GUS::ObjRelP::DbiDatabase;
use GUS::Supported::GusConfig;

my ($orthoGroupTable, $orthoGroupAaTable, $undo) = @ARGV;

usage() unless scalar(@ARGV >= 2);

my $gusconfig = GUS::Supported::GusConfig->new("$ENV{GUS_HOME}/config/gus.config");
my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
                                        $gusconfig->getDatabaseLogin(),
                                        $gusconfig->getDatabasePassword(),
                                        0,0,1,
                                        $gusconfig->getCoreSchemaName());
my $dbh = $db->getQueryHandle();

my ($sql1,$sql2);
if ($undo) {
    $sql2 = <<SQL;
DELETE FROM $orthoGroupTable
WHERE core_peripheral_residual = 'P'
SQL

    $sql1 = <<SQL;
DELETE FROM $orthoGroupAaTable
WHERE ortholog_group_id IN
(SELECT ortholog_group_id FROM $orthoGroupTable
WHERE core_peripheral_residual = 'P')
SQL
    
} else {
    my $groupNextVal = $orthoGroupTable . "_sq.nextval";
    my $aaNextVal = $orthoGroupAaTable . "_sq.nextval";

    $sql1 = <<SQL;
INSERT INTO $orthoGroupTable
(ortholog_group_id, subclass_view, name, number_of_members, external_database_release_id, modification_date, user_read, user_write, group_read, group_write, other_read, other_write, row_user_id, row_group_id, row_project_id, row_alg_invocation_id, core_peripheral_residual)
SELECT $groupNextVal, subclass_view, name, 0, external_database_release_id, sysdate, user_read, user_write, group_read, group_write, other_read, other_write, row_user_id, row_group_id, row_project_id, 0, 'P'
FROM $orthoGroupTable
SQL

    $sql2 = <<SQL;
INSERT INTO $orthoGroupAaTable
(ortholog_group_aa_sequence_id, ortholog_group_id, aa_sequence_id, modification_date, user_read, user_write, group_read, group_write, other_read, other_write, row_user_id, row_group_id, row_project_id, row_alg_invocation_id)
SELECT $aaNextVal, og2.ortholog_group_id, first.aa_sequence_id, sysdate, first.user_read, first.user_write, first.group_read, first.group_write, first.other_read, first.other_write, first.row_user_id, first.row_group_id, first.row_project_id, 0
FROM $orthoGroupTable og2,
(SELECT og.name, oga.aa_sequence_id, oga.user_read, oga.user_write, oga.group_read, oga.group_write, oga.other_read, oga.other_write, oga.row_user_id, oga.row_group_id, oga.row_project_id
FROM $orthoGroupTable og
, $orthoGroupAaTable oga
WHERE og.ortholog_group_id = oga.ortholog_group_id) first
WHERE og2.name = first.name
and og2.core_peripheral_residual = 'P'
SQL
}

print STDERR "executing sql: $sql1\n";
my $queryHandle = $dbh->prepare($sql1) or die $dbh->errstr;
$queryHandle->execute() or die $dbh->errstr;

print STDERR "executing sql: $sql2\n";
my $queryHandle = $dbh->prepare($sql2) or die $dbh->errstr;
$queryHandle->execute() or die $dbh->errstr;

$dbh->commit();

sub usage {
    die "

Make a copy of each core orthogroup in the apidb.orthologgroup table. This copy will be called a 

peripheral group and will contain all core proteins as well as peripheral proteins that map into

the group. Also a copy is made of each of the links to the core proteins in the linking table

apidb.OrthologGroupAaSequence

Usage: copyOrthologGroupTables orthoGroupTable orthoGroupAaTable [-undo]

If undo is set, removes the rows from the destination tables.

";
}

