#!@perl@
use strict;

use lib "$ENV{GUS_HOME}/lib/perl";
use File::Basename;
use ApiCommonData::Load::Steps;
use ApiCommonData::Load::MakeTaskDirs;

my $propertiesFile = $ARGV[0];
my $printXML = $ARGV[1];

my ($mgr, $projectDir, $release, $allSpecies)
  = &initOrthomclAnalysis($propertiesFile, $printXML);

&copyPipelineDirToComputeCluster($mgr);

##############################################################################
########   The Pipeline                                               ########
##############################################################################


##### all proteomes vs all proteomes ncbi blastp #####

my $blastParams = "-F 'm S' -v 100000 -b 100000 -z 1300000 -e 1e-5";

my $minLength = 10;
my $maxStopCodonPercent = 20;
my $fetchSql = "select ot.three_letter_abbrev || '|' || x.source_id,sequence from dots.externalaasequence x, apidb.orthomcltaxon ot where ot.taxon_id = x.taxon_id";

&documentBlast($mgr, 'BLASTP', "Protein sequences", "Protein sequences", $blastParams);

&createSimilarityDir($mgr,"ProteinSeqs","ProteinSeqs","(\\S+)","$blastParams","blastp", "ncbi");

&extractProteinSeqs($mgr, "ProteinSeqs", $fetchSql, $minLength, $maxStopCodonPercent);

&copyFilesToComputeCluster($mgr,"ProteinSeqs-ProteinSeqs", "similarity");

&copyFilesToComputeCluster($mgr,"ProteinSeqs.fsa","seqfiles");

&startProteinBlastOnComputeCluster($mgr,"ProteinSeqs","ProteinSeqs","apidb");

$mgr->waitForCluster("ProteinSeqs blast similarity", "waitProteinSeqs-ProteinSeqs");

 # ##### iprscan #####
 my $insertInterproConfig = "$projectDir/$release/insertInterpro-config.xml";
 
 &documentIPRScan($mgr,"v4.3.1");

 my $fetchSql2 = "select x.aa_sequence_id,source_id, sequence from dots.externalaasequence x, apidb.orthomcltaxon ot where ot.taxon_id = x.taxon_id";

 &extractProteinSeqs($mgr, "ProteinSeqsIPRScan", $fetchSql2, $minLength, $maxStopCodonPercent);

 &copyFilesToComputeCluster($mgr,"ProteinSeqsIPRScan.fsa","seqfiles");

 &createIprscanDir($mgr, "ProteinSeqsIPRScan.fsa");

 &copyFilesToComputeCluster($mgr,"iprscan");

 &startIprScanOnComputeCluster($mgr,"ProteinSeqsIPRScan.fsa","apidb", 1);

# &copyFilesFromComputeCluster($mgr,"ProteinSeqs-ProteinSeqs", "similarity");

# &loadBlastWithSqlldr($mgr,"ProteinSeqs-ProteinSeqs",'',"blastSimilarity.out");

# &orthomclPairs ($mgr, "no", "ortholog2WayIndex");

# &makeOrthoAbcFile ($mgr);

# &runMcl ($mgr, '1.5');

# &mclOutToGroupsFile ($mgr);

# &loadOrthoMCLResultsForOrthomclDB($mgr, "OrthoMCL", "3.0", "orthomclGroups.txt");

# # $mgr->waitForCluster("ProteinSeqs interproscan", "waitProteinSeqs-Interproscan");

# &copyFilesFromComputeCluster($mgr,"ProteinSeqs.fsa","iprscan");

# &loadIprscanResults($mgr,"ProteinSeqs.fsa", "INTERPRO","19.0",$insertInterproConfig, 'ExternalAASequence', '--srcIdColumn aa_sequence_id');

# #&updateOrthologGroups($mgr);

# &extractFilesForMsa($mgr, 500);

# &copyFilesToComputeCluster($mgr,"groups","seqfiles");

# #&createMuscleDir       MAKE THIS STEP

# #&copyFilesToComputeCluster();  MAKE THIS STEP

# #&runMuscleForMSAFile($mgr);

# #$mgr->waitForCluster("Running muscle for msa", "waitMuscle");

# &copyFilesFromComputeCluster($mgr,, "msa");

# &loadMsaResultFiles($mgr,"msaFiles","(OG30_\\d+).msa","yes");

&loadGroupTaxonMatrix($mgr);

# &generateOrthomclDomainKeywords($mgr);#after iprscan, every protein should have domains, index the verbiage with this

# my $downloadSql = "select ot.three_letter_abbrev || '|' || x.source_id || ' | ' ||  
#                    CASE WHEN og.name is null THEN 'no_group' ELSE  og.name END || ' | '  || x.description ,x.sequence 
#                    from dots.externalaasequence x, apidb.orthomcltaxon ot, apidb.orthologgroup og, 
#                    apidb.orthologgroupaasequence oga 
#                    where ot.taxon_id = x.taxon_id and x.aa_sequence_id = oga.aa_sequence_id(+) 
#                    and oga.ortholog_group_id = og.ortholog_group_id(+) and x.taxon_id != 118568";


# &extractProteinSeqs($mgr, "seqs_orthomcl-3", $downloadSql);

# &copy($mgr, "/files/cbil2/orthoMCL/3.0/analysis_pipeline/primary/data/seqfiles/seqs_orthomcl-3.fsa", "/files/cbil/data/cbil/apiSiteFiles/downloadSite/orthomcl/3.0/seqs_orthomcl-3.fasta", "/files/cbil/data/cbil/apiSiteFiles/downloadSite/orthomcl/3.0");

# my $deflineSql = "select ot.three_letter_abbrev || '|' || x.source_id || ' | ' ||  
#                    CASE WHEN og.name is null THEN 'no_group' ELSE  og.name END || ' | '  || x.description
#                    from dots.externalaasequence x, apidb.orthomcltaxon ot, apidb.orthologgroup og, 
#                    apidb.orthologgroupaasequence oga 
#                    where ot.taxon_id = x.taxon_id and x.aa_sequence_id = oga.aa_sequence_id(+) 
#                    and oga.ortholog_group_id = og.ortholog_group_id(+) and x.taxon_id != 118568";

# &extractProteinSeqs($mgr, "deflines", $deflineSql,"","",1);

# &copy($mgr, "/files/cbil2/orthoMCL/3.0/analysis_pipeline/primary/data/seqfiles/deflines", "/files/cbil/data/cbil/apiSiteFiles/downloadSite/orthomcl/3.0/deflines", "/files/cbil/data/cbil/apiSiteFiles/downloadSite/orthomcl/3.0");

# &makeInterproDownloadFile($mgr,"", "iprscan", "", "", "INTERPRO", "19.0", "OrthoMCL");

# my $svgTemplate = "$ENV{GUS_HOME}/data/OrthoMCLData/Load/svg.template"; 

# #&createBiolayoutData($mgr, $svgTemplate); This ran far too slowly on the server, Jerric ran it manually on his PC and is looking into a solution - all indexes are in place and stats were run after loading the tables

# &makePairsDownloadFile($mgr, "OrthoMCL");

# &formatBlastFileForOrtho($mgr,"aa_seqs_OrthoMCL-3.0.fasta","/files/cbil/data/cbil/apiSiteFiles/downloadSite/OrthoMCL/release-3.0","proteinSeqs","T");

# &copy($mgr, "/files/cbil2/orthoMCL/3.0/analysis_pipeline/primary/data/blastSite"   , "/files/cbil2/orthoMCL/3.0/");

# #&copyFilesToComputeClusterForOrtho($mgr,'',"/files/cbil2/orthoMCL/3.0/blastSite","/genomics/binf/scratch/orthoMCL/3.0"); fix this and write step to copy the protein fasta file to cluster, rename proteinSeqs.fasta

# &mapOldIdsToNewIds($mgr,"/files/cbil2/orthoMCL/manualDelivery/previousOrthoSeqs/2/seqs_orthomcl-2.fasta.gz","/files/cbil2/orthoMCL/manualDelivery/orthoMCLTaxons/2009-05-15/ortho2Ortho3Abbrev","2");

# &mapOldGroupsToNewIds($mgr,"/files/cbil2/orthoMCL/manualDelivery/previousOrthoGroups/2/groups_orthomcl-2.txt.gz","/files/cbil2/orthoMCL/manualDelivery/orthoMCLTaxons/2009-05-15/ortho2Ortho3Abbrev","2");

# &mapOldIdsToNewIds($mgr,"/files/cbil2/orthoMCL/manualDelivery/previousOrthoSeqs/1/seqs_orthomcl-1.fasta.gz","/files/cbil2/orthoMCL/manualDelivery/orthoMCLTaxons/2009-05-15/ortho1Ortho3Abbrev","1");

# &mapOldGroupsToNewIds($mgr,"/files/cbil2/orthoMCL/manualDelivery/previousOrthoGroups/1/orthomclGroups.txt","/files/cbil2/orthoMCL/manualDelivery/orthoMCLTaxons/2009-05-15/ortho1Ortho3Abbrev","1");

# ########## steps to map protein seqs to ortho groups ###############################

# #&createSimilarityDir($mgr,"GintestinalisAssemblageBProteins","aaSeqsOrthoMCL3","(\S+)","$blastParams","blastp", "ncbi");

# #&createSimilarityDir($mgr,"GintestinalisAssemblageEProteins","aaSeqsOrthoMCL3","(\S+)","$blastParams","blastp", "ncbi");

# #make all the step calls to run the orthoMCL mapper - copying back results is below

# &copyFilesFromComputeCluster($mgr,"GintestinalisAssemblageBProteins-aaSeqsOrthoMCL3","similarity");

# &copyFilesFromComputeCluster($mgr,"GintestinalisAssemblageEProteins-aaSeqsOrthoMCL3","similarity");



# #make all the download files gzipped

# #fix the pairs files to have abbrev|source_id, run a script on them - going forward the abbrev|source_id should be in the similarsequences table and the code should create the files that way

# #add step to map to inprot

# #add a step to use orthomclDumpPairsFiles for download site 

# #
# #
# # Last step
# #
$mgr->goodbye("Pipeline complete!\n");

