#!/usr/bin/perl

use strict;
use DBI;

my $configFile = $ARGV[0];

usage() unless $configFile;

my $config = parseConfigFile($configFile);

if ($config->{dbVendor} = 'oracle') {
  require DBD::Oracle;
} else {
  require DBD::mysql;
}

my $dbh = DBI->connect($config->{dbConnectString}, $config->{dbLogin},
		       $config->{dbPassword}) or die DBI::errstr;

if ($config->{dbVendor} = 'oracle') {
  require DBD::Oracle;
} else {
  require DBD::mysql;
}

my $dbh = DBI->connect($config->{dbConnectString}, $config->{dbLogin},
		       $config->{dbPassword}) or die DBI::errstr;

my $inParalogTable = $config->{inParalogTable};
my $orthologTable = $config->{orthologTable};
my $coOrthologTable = $config->{coOrthologTable};

my $sql = "
select sum(c) from (
  select count(*) c from $orthologTable
  union
  select count(*) c from $inParalogTable
  union
  select count(*) c from $coOrthologTable
)
";

print STDERR "counting the number of edges in the ortholog, inparalog and coortholog tables...\n";

my $stmt = $dbh->prepare($sql) or die DBI::errstr;
$stmt->execute() or die DBI::errstr;

my ($dimension) = $stmt->fetchrow_array();

my $header = "(mclheader
mcltype matrix
dimensions ${dimension}x${dimension}
)

(mclmatrix
begin

";

print $header;

$sql = "
select sequence_id_a, sequence_id_b, normalized_score from (
  select sequence_id_a, sequence_id_b, normalized_score
  from $inParalogTable
  union
  select sequence_id_a, sequence_id_b, normalized_score
  from $orthologTable
  union
  select sequence_id_a, sequence_id_b, normalized_score
  from $coOrthologTable
  union
  select sequence_id_b, sequence_id_a, normalized_score
  from $inParalogTable
  union
  select sequence_id_b, sequence_id_a, normalized_score
  from $orthologTable
  union
  select sequence_id_b, sequence_id_a, normalized_score
  from $coOrthologTable
) order by sequence_id_a, sequence_id_b
";

$stmt = $dbh->prepare($sql) or die DBI::errstr;
$stmt->execute() or die DBI::errstr;

my $prevQueryId = -1;
my @row;
while (my ($queryId, $subjectId, $score) = $stmt->fetchrow_array()) {
  if ($queryId ne $prevQueryId) {
    print "$prevQueryId\t" . join(" ", @row) . " \$\n" unless $prevQueryId == -1;
    @row = ();
    $prevQueryId = $queryId;
  }
  $score = int($score * 1000 + .5)/1000;
  push(@row, "$subjectId:$score");
}
print "$prevQueryId\t" . join(" ", @row) . " \$\n" unless $prevQueryId == -1;
print ")\n";

sub parseConfigFile {
  my ($configFile) = @_;

  open(F, $configFile) || die "Can't open config file '$configFile'\n";

  next if /^#/;
  my $config;
  while(<F>) {
    /(\w+)\=(.+)/ || "illegal line in config file '$_'\n";
    $config->{$1} = $2;
  }
  return $config;
}

sub usage {
  print STDERR "

Dump orthomcl edges (produced by the orthomclEdges program) from an OrthomclDB database instance into the format expected by the MCL program.

Usage: dumpMatrixFile configFile

Sample Config File (a subset of the properties required by the orthomclEdges program:

dbVendor=oracle  (or mysql)
dbConnectString=dbi:Oracle:orthomcl
dbLogin=my_db_login
dbPassword=my_db_password
orthologTable=Ortholog
inParalogTable=InParalog
coOrthologTable=CoOrtholog
";
  exit(1);
}
