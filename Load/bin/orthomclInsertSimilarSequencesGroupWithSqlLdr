#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use GUS::ObjRelP::DbiDatabase;
use GUS::Supported::GusConfig;

my $dir = $ARGV[0];
my $simSeqTableSuffix = $ARGV[1];
my $simSeqGroupTableSuffix = $ARGV[2];
my $undo = $ARGV[3];
usage() unless (scalar(@ARGV)==3 || scalar(@ARGV)==4);

my $tempFile = "$dir/simSeqGroup.tmp";
my $dbh = getDbHandle();
my $ctlFile = "$dir/blast.ctl";
my $sqlldrLog = "$dir/sqlldr.log";

my @temp=split(",",$simSeqTableSuffix);
my %suffixes=@temp;


if ($undo eq "undo") {
    truncateTable($dbh,$simSeqGroupTableSuffix);
} else {
    mkdir($dir) || die "could not create directory '$dir' \n";
    createTempFile($dbh,$tempFile,\%suffixes);
    writeToGroupTable($dbh,$ctlFile,$sqlldrLog,$tempFile,$simSeqGroupTableSuffix);
#    system("rm -rf $dir");
#    print STDERR "deleting temporary directory $dir\n";
}

exit;


sub getDbCredentials {
    my $gusconfig = GUS::Supported::GusConfig->new("$ENV{GUS_HOME}/config/gus.config");
    my $dbInstance = $gusconfig->getDbiDsn();
    $dbInstance =~ s/dbi:\S+://g;
    my $dbLogin = $gusconfig->getDatabaseLogin();
    my $dbPassword = $gusconfig->getDatabasePassword();
    return ($dbInstance,$dbLogin,$dbPassword);
}

sub getDbHandle {
    my $gusconfig = GUS::Supported::GusConfig->new("$ENV{GUS_HOME}/config/gus.config");
    my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
					    $gusconfig->getDatabaseLogin(),
					    $gusconfig->getDatabasePassword(),
					    0,0,1,
					    $gusconfig->getCoreSchemaName());
    return  $db->getQueryHandle();
}

sub truncateTable {
    my ($dbh,$simSeqGroupTableSuffix) = @_;
    my $sql = "truncate table apidb.SimilarSequencesGroup".$simSeqGroupTableSuffix;
    print STDERR "executing sql: $sql\n";
    my $queryHandle = $dbh->prepare($sql) or die $dbh->errstr;
    $queryHandle->execute() or die $dbh->errstr;
    $sql = "select count(*) from apidb.SimilarSequencesGroup".$simSeqGroupTableSuffix;
    $queryHandle = $dbh->prepare($sql) or die $dbh->errstr;
    $queryHandle->execute() or die $dbh->errstr;
    my @count = $queryHandle->fetchrow_array();
    die "Truncate of apidb.SimilarSequencesGroup$simSeqGroupTableSuffix did not succeed. Table is not empty ($count[0] rows)" if $count[0]>0;
}

sub createTempFile {
    my ($dbh,$tempFile,$suffixes) = @_;

    my $aaInfo = getAaInfo($dbh);

    open(OUT,">$tempFile") || die "Can't open '$tempFile' for writing";

    foreach my $suffix (keys %{$suffixes}) {
	my $sql = "SELECT query_id, subject_id, evalue_mant, evalue_exp, percent_match
                   FROM apidb.SimilarSequences".$suffix;

	print STDERR "executing sql: $sql\n\n";
	my $queryHandle = $dbh->prepare($sql) or die $dbh->errstr;
	$queryHandle->execute() or die $dbh->errstr;
	print STDERR "saving results in file: $tempFile\n\n";

	while (my @row = $queryHandle->fetchrow_array()) {
	    my $queryGroup = $aaInfo->{$row[0]}->{groupId};
	    my $subjectGroup = $aaInfo->{$row[1]}->{groupId};
	    if ($queryGroup eq $subjectGroup && $row[4]>=20) {
		if ($row[3] < -5 || ( $row[3] == -5 && $row[2] == 1 ) ) {
		    my @text = ($queryGroup,$row[0],$aaInfo->{$row[0]}->{aaType});
		    push @text, ($row[1],$aaInfo->{$row[1]}->{aaType},$row[2],$row[3]);
		    print OUT join(" ",@text)."\n";
		}
	    }
	}
    }
    close(OUT);
}	

sub getAaInfo {
    my ($dbh) = @_;
    
    my $aaInfo;

    my $sql = "SELECT eas.secondary_identifier, ogas.ortholog_group_id, 'R' as core_peripheral_residual
               FROM dots.ExternalAaSequence eas, apidb.OrthologGroupAaSequence ogas,
                    apidb.OrthologGroup og   
               WHERE eas.aa_sequence_id = ogas.aa_sequence_id
                     AND ogas.ortholog_group_id = og.ortholog_group_id
                     AND og.core_peripheral_residual = 'R'"; 

    my $queryHandle = $dbh->prepare($sql) or die $dbh->errstr;
    $queryHandle->execute() or die $dbh->errstr;

    while (my @row = $queryHandle->fetchrow_array()) {
	$aaInfo->{$row[0]}->{groupId} = $row[1];
	$aaInfo->{$row[0]}->{aaType} = $row[2];
    }
    
    $sql = "SELECT eas.secondary_identifier, ogas.ortholog_group_id,
                      ot.core_peripheral as core_peripheral_residual
               FROM dots.ExternalAaSequence eas, apidb.OrthologGroupAaSequence ogas,
                    apidb.OrthologGroup og, apidb.OrthomclTaxon ot
               WHERE eas.aa_sequence_id = ogas.aa_sequence_id
                     AND ogas.ortholog_group_id = og.ortholog_group_id
                     AND og.core_peripheral_residual = 'P'
                     AND substr(eas.secondary_identifier,1,4) = ot.three_letter_abbrev"; 

    $queryHandle = $dbh->prepare($sql) or die $dbh->errstr;
    $queryHandle->execute() or die $dbh->errstr;

    while (my @row = $queryHandle->fetchrow_array()) {
	$aaInfo->{$row[0]}->{groupId} = $row[1];
	$aaInfo->{$row[0]}->{aaType} = $row[2];
    }

    return $aaInfo;
}



sub writeToGroupTable {
    my ($dbh,$ctlFile,$sqlldrLog,$tempFile,$simSeqGroupTableSuffix) = @_;

    # confirm that the target table is empty.  this is required so that our undo strategy (truncating) will work
    my $sql = "select count(*) from apidb.SimilarSequencesGroup$simSeqGroupTableSuffix";
    my $queryHandle = $dbh->prepare($sql) or die $dbh->errstr;
    $queryHandle->execute() or die $dbh->errstr;
    my @count = $queryHandle->fetchrow_array();
    die "Table apidb.SimilarSequencesGroup$simSeqGroupTableSuffix is not empty ($count[0] rows)" if $count[0]>0;

    # run sqlldr (after writing its control file)
    print STDERR "Writing from file $tempFile to table apidb.SimilarSequencesGroup$simSeqGroupTableSuffix \n";
    writeControlFile($ctlFile, $simSeqGroupTableSuffix);
    my ($dbInstance,$dbLogin,$dbPassword) = getDbCredentials();
    my $cmd = "sqlldr $dbLogin/$dbPassword\@$dbInstance data=$tempFile control=$ctlFile log=$sqlldrLog rows=25000 direct=TRUE";
    print STDERR "Running: $cmd \n";
    system($cmd);
}

sub writeControlFile {
  my ($ctlFile, $suffix) = @_;

  open(CTL, ">$ctlFile") || die "Can't open '$ctlFile' for writing";
  print CTL <<"EOF";
     LOAD DATA
     INFILE *
     INTO TABLE apidb.SimilarSequencesGroup$suffix
     FIELDS TERMINATED BY " " OPTIONALLY ENCLOSED BY '"'
     TRAILING NULLCOLS
    (ortholog_group_id,
     query_id,
     query_core_peripheral,
     subject_id,
     subject_core_peripheral,
     evalue_mant,
     evalue_exp
    )
EOF

  close(CTL);
}






sub usage {
    die "

Insert rows into the table apidb.SimilarSequencesGroup{simSeqGroupTableSuffix} using

data from the table apidb.SimilarSequences{simSeqTableSuffix}. A temporary file is created

in {directory} and then data is loaded from the file using Sql Loader.

Usage: orthomclInsertSimilarSequencesGroup {directory} {simSeqTableSuffix} {simSeqGroupTableSuffix} [undo]

If undo is set, removes all rows from the table apidb.SimilarSequencesGroup{simSeqGroupTableSuffix}

";
}

