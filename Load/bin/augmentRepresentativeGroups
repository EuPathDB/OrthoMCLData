#!/usr/bin/perl

# for plan B

# this script reads the ortholog group file created by tier 1, which contains
# only proteins from "representative" taxa, and augments it with "secondary"
# proteins (i.e. those not from representative taxa) by adding each secondary
# protein to the same group as the protein to which it has greatest similarity

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use CBIL::Util::PropertySet;
use DBI;

$| = 1;

my $groups;
my %grouplist;

my $dbh = getDbHandle();
my $residualsFile = "/home/iodice/argResiduals.fasta";

print "reading orthomclGroups.txt into hash at " . `date` . "\n";
my $groupsFile = "/eupath/data/EuPathDB/devWorkflows/OrthoMCL/planBtier1/data/repGroups/orthomclGroups.txt";
open(F, $groupsFile) || die "Can't open groups file '$groupsFile'\n";
while (<F>) {
    my @a = split(/\s+/);
    my $groupName = $a[0];
    shift(@a);
    map {$groups->{$_} = $groupName} @a;
    $grouplist{$groupName} = \@a;
}
close(F);

print "reading representative taxa from directory at " . `date` . "\n";
my $repsDir = "/eupath/data/EuPathDB/devWorkflows/OrthoMCL/testdata/representatives";
chdir $repsDir || die "Can't chdir to '$repsDir'\n";
my @taxonNames = map {/(\w+).fasta/; "'$1'"; } <*.fasta>;
my $representativeTaxa = join(', ', @taxonNames);

my $pvalueExponentCutoff = 0; # no cutoff at all

# open residuals file
open(my $fh, ">", $residualsFile)
  or die "cannot open residuals file \"$residualsFile\" for writing: $!";

print "preparing secondary-protein query at " . `date` . "\n";
# prepare query for secondary (that is, non-representative) protein IDs
my $secondaryQuery = $dbh->prepare(<<SQL);
    select distinct query_id
    from apidb.SimilarSequences\@orth500n
    where query_taxon_id not in ($representativeTaxa)
SQL

print "preparing query for representative for a given protein at " . `date` . "\n";
# prepare the query that, for a given non-representative protein, finds its best match among representatives
my $repQuery = $dbh->prepare(<<SQL);
    select subject_id
    from apidb.SimilarSequences\@orth500n
    where query_id = ?
      and subject_taxon_id in ($representativeTaxa)
      and evalue_exp <= $pvalueExponentCutoff
    order by evalue_exp, evalue_mant desc
SQL

print "executing secondary query at " . `date` . "\n";
$secondaryQuery->execute();
print "iterating through rows at " . `date` . "\n";
while (my($secondary) = $secondaryQuery->fetchrow_array()) {

  # find this protein's representative
  $repQuery->execute($secondary);
  my ($representative) = $repQuery->fetchrow_array();
  $repQuery->finish();

  if ($representative) {
    # we found a representative; update the hash
    my $groupName = $groups->{$representative};
    # print "adding secondary protein \"$secondary\", represented by \"$representative\" to group \"$groupName\"\n";
    my @a = @{$grouplist{$groupName}};
    push (@a, $secondary);
    $grouplist{$groupName} = \@a;
  } else {
    # no representative found; write this protein ID to the residuals file
    print $fh "> $secondary\n";
  }
}

print "finishing secondaryQuery at " . `date` . "\n";
$secondaryQuery->finish();
$dbh->disconnect();

close($fh)
  or warn "close failed: $!";

print "writing out augmented groups at " . `date` . "\n";
open(OUT, ">", "/home/iodice/augmuntedOrthologGroups.txt");
foreach my $group (keys %grouplist) {
  my @a = @{$grouplist{$group}};
  print OUT "$group " . join(" ", @a) . "\n";
}
close(OUT);

print "done. at " . `date` . "\n";

sub getDbHandle {

  my $gusConfigFile = $ENV{GUS_HOME} . "/config/gus.config";
  my @properties = ();
  my $gusconfig = CBIL::Util::PropertySet->new($gusConfigFile, \@properties, 1);

  my $u = $gusconfig->{props}->{databaseLogin};
  my $pw = $gusconfig->{props}->{databasePassword};
  my $dsn = $gusconfig->{props}->{dbiDsn};

  my $dbh = DBI->connect($dsn, $u, $pw) or die DBI::errstr;
  $dbh->{RaiseError} = 1;
  $dbh->{AutoCommit} = 0;

  return $dbh;
}
