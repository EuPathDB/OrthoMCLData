#!/usr/bin/perl

# for a given OrthoMCL groups file count occurrences of simple synteny, in which
# two groups are adjacent to each other in more than one organism, or more than
# one place in a single organism

# usage: syntenicity <groupsFile>

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use CBIL::Util::PropertySet;
use DBI;

$| = 1;

my %group;

my $dbh = getDbHandle();

print "reading orthomclGroups.txt into hash at " . `date` . "\n";
my $groupsFile = $ARGV[0];
open(F, $groupsFile) || die "Can't open groups file '$groupsFile'\n";
while (<F>) {
    my @a = split(/\s+/);
    my $groupName = $a[0];
    shift(@a);
    map {$group{$_} = $groupName} @a;
}
close(F);

print "preparing query for gene locations at " . `date` . "\n";
# prepare query for secondary (that is, non-representative) protein IDs
my $geneQuery = $dbh->prepare(<<SQL);
    select lower(substr(organism, 1, 1)) || substr(organism, instr(organism, ' ') + 1, 3)
           as taxon,
           lower(substr(organism, 1, 1)) || substr(organism, instr(organism, ' ') + 1, 3)
           || '|' || source_id as protein_id,
           project_id || '-' || sequence_id || '-' || na_sequence_id as sequence_id,
           start_min as location,
           species
    from ApidbTuning.GeneAttributes\@eupaan
    order by project_id, organism, species, sequence_id, na_sequence_id, start_min
SQL

print "executing gene-location query at " . `date` . "\n";
$geneQuery->execute();

my ($lastSequence, $lastGroup); # to compare the previous iteration with the current one
my (%taxonReads, %taxonGroups); # counts, by taxon, of protein IDs read and group assignments found
my %speciesString; # indexed by taxon abbreviation, returns genus-species string
my %adjacency; # indexed in two dimensions by group, stores array of taxon (abbrevs), to represent
                                       # the list of taxa in which those two groups are adjacent
my %synteny; # indexed like the adjacency hash, stores a flag set if the adjacency has occurred more than once
my $syntenicity; # overall score

print "iterating through gene locations and noting group adjacencies at " . `date` . "\n";
while (my($taxon, $protein, $sequence, $location, $species) = $geneQuery->fetchrow_array()) {
  $taxonReads{$taxon}++;
  $speciesString{$taxon} = $species;

  next unless $group{$protein};

  $taxonGroups{$taxon}++;

  if ($sequence eq $lastSequence) {

    my $smallerGroup = ($group{$protein} gt $lastGroup) ? $group{$protein} : $lastGroup;
    my $biggerGroup = ($group{$protein} lt $lastGroup) ? $group{$protein} : $lastGroup;

    my @a;
    if ($adjacency{$smallerGroup}{$biggerGroup}) {
      @a = @{$adjacency{$smallerGroup}{$biggerGroup}};
      $synteny{$smallerGroup}{$biggerGroup} = 1;
    }
    push (@a, $taxon);
    $adjacency{$smallerGroup}{$biggerGroup} = \@a;
  }
  $lastGroup = $group{$protein};
  $lastSequence = $sequence;
}

print "finishing geneQuery at " . `date` . "\n";
$geneQuery->finish();
$dbh->disconnect();

print "iterating through syntenies at " . `date` . "\n";
my %taxonSynteny; # indexed by two taxon abbrevs, stores a count of syntenies between the two
foreach my $smallerGroup (sort keys %synteny)  {
  foreach my $biggerGroup (sort keys %{$synteny{$smallerGroup}}) {
    my @a = @{$adjacency{$smallerGroup}{$biggerGroup}};

    # bump up overall score by one less than array size
    $syntenicity += $#a;

    # iterate through all N-choose-2 pairings from @a
    for (my $i = 0; $i < $#a; $i++) {
      for (my $j = $i + 1; $j <= $#a; $j++) {
	my $smallerTaxon = ($a[$i] lt $a[$j]) ? $a[$i] : $a[$j];
	my $biggerTaxon = ($a[$i] gt $a[$j]) ? $a[$i] : $a[$j];
	$taxonSynteny{$smallerTaxon}{$biggerTaxon} += 1;
      }
    }
  }
}

print "printing report at " . `date` . "\n";

# print protein and group counts, for QA purposes
print "\n                               ----proteins----\n                                located grouped\n";
foreach my $taxon (sort keys %taxonReads) {
  printf "%30s  %7d %7d\n", $speciesString{$taxon}, $taxonReads{$taxon}, $taxonGroups{$taxon};
}

# print paralogous scores by taxon
print "\nIntra-taxon (paralogous) scores by taxon\n";
my @outputRecords;
foreach my $smallerTaxon (sort keys %taxonSynteny)  {
  foreach my $biggerTaxon (sort keys %{$taxonSynteny{$smallerTaxon}}) {
    if ($smallerTaxon eq $biggerTaxon) {
      my $s = sprintf "%9d %30s\n", $taxonSynteny{$smallerTaxon}{$biggerTaxon},
	              $speciesString{$smallerTaxon};
      push (@outputRecords, $s);
    }
  }
}
print sort({$b <=> $a} @outputRecords);

# print orthologous scores by taxon pair
print "\nInter-taxon (orthologous) scores by taxon pair\n";
@outputRecords = undef;
foreach my $smallerTaxon (sort keys %taxonSynteny)  {
  foreach my $biggerTaxon (sort keys %{$taxonSynteny{$smallerTaxon}}) {
    if ($smallerTaxon ne $biggerTaxon) {
      my $s = sprintf "%6d %30s %30s\n", $taxonSynteny{$smallerTaxon}{$biggerTaxon},
	              $speciesString{$smallerTaxon}, $speciesString{$biggerTaxon};
      push (@outputRecords, $s);
    }
  }
}
print sort({$b <=> $a} @outputRecords);

# print total score
print "\nOverall synteny score: $syntenicity\n";

print "done. at " . `date` . "\n";

sub getDbHandle {

  my $gusConfigFile = $ENV{GUS_HOME} . "/config/gus.config";
  my @properties = ();
  my $gusconfig = CBIL::Util::PropertySet->new($gusConfigFile, \@properties, 1);

  my $u = $gusconfig->{props}->{databaseLogin};
  my $pw = $gusconfig->{props}->{databasePassword};
  my $dsn = $gusconfig->{props}->{dbiDsn};

  my $dbh = DBI->connect($dsn, $u, $pw) or die DBI::errstr;
  $dbh->{RaiseError} = 1;
  $dbh->{AutoCommit} = 0;

  return $dbh;
}
