#!/usr/bin/perl

# extract the maximal subset of the SimilarSequences table involving only proteins from the given fasta file

use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use Getopt::Long;
use GUS::Supported::GusConfig;
use GUS::ObjRelP::DbiDatabase;

my ($gusConfigFile, $suffix, $proteinsFile, $undo, $collapseClades, $verbose);
&GetOptions("gusConfigFile=s" => \$gusConfigFile,
	    "suffix=s" => \$suffix,
	    "proteinsFile=s" => \$proteinsFile,
	    "undo!" => \$undo,
	    "collapseClades!" => \$collapseClades,
	    "verbose!" => \$verbose);

&usage unless $undo || $proteinsFile;

my $gusconfig = GUS::Supported::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
                                        $gusconfig->getDatabaseLogin(),
                                        $gusconfig->getDatabasePassword(),
                                        $verbose,0,1,
                                        $gusconfig->getCoreSchemaName());

my $dbh = $db->getQueryHandle(0);

if ($undo) {

  print STDERR "dropping ProteinList${suffix} (or trying to) at " . `date` . "\n" if $verbose;
  # this table is normally deleted at the end of a run, so not really necessary.
  $dbh->do(<<SQL);
    drop table apidb.ProteinList${suffix}
SQL

  print STDERR "truncating SimilarSequences${suffix} at " . `date` . "\n" if $verbose;
  $dbh->do(<<SQL) or die "trying to truncate apidb.SimilarSequences${suffix}";
    truncate table apidb.SimilarSequences${suffix}
SQL

  print STDERR "finished undoing at " . `date` . "\n" if $verbose;
  exit;
}

open(F, $proteinsFile) || die "Can't open proteins file '$proteinsFile' at " . `date` . "\n";

print STDERR "creating table apidb.ProteinList${suffix} at " . `date` . "\n" if $verbose;
$dbh->do(<<SQL);
    create table apidb.ProteinList${suffix} nologging as
    select query_id as id from apidb.SimilarSequences\@orth500n where 1=0
SQL

print STDERR "preparing protein-list insert statement at " . `date` . "\n" if $verbose;
my $insert = $dbh->prepare(<<SQL) or die;
    insert into apidb.ProteinList${suffix} values (?)
SQL

print STDERR "reading protein file into ProteinList${suffix} at " . `date` . "\n" if $verbose;
while(<F>) {
  next unless /\>\s*(\S+)/;
  $insert->execute($1);
}

print STDERR "indexing ProteinList${suffix} at " . `date` . "\n" if $verbose;
$dbh->do(<<SQL);
    create index ProteinList_ix${suffix} on apidb.ProteinList${suffix}(id)
SQL

my $idsAndTaxa;
if ($collapseClades) {
  $idsAndTaxa = " apidb.clade(query_taxon_id) || '|' || query_id, apidb.clade(subject_taxon_id) || '|' || subject_id, apidb.clade(query_taxon_id), apidb.clade(subject_taxon_id), ";
  } else {
    $idsAndTaxa = " query_id, subject_id, query_taxon_id, subject_taxon_id, ";
  }

print STDERR "extracting the subset of SimilarSequences in which both genes are in the given set at " . `date` . "\n" if $verbose;

my $chunks = 100;  # how many pieces to break the big data move into
my $insertCount;

for (my $chunk = 0; $chunk < $chunks; $chunk++) {

  print STDERR "moving chunk " . ($chunk + 1) . " of $chunks at " . `date` . "\n" if $verbose;
  my $done = $dbh->do(<<SQL);
          insert into apidb.SimilarSequences$suffix
                      (query_id, subject_id, query_taxon_id, subject_taxon_id,
                       evalue_mant, evalue_exp, percent_identity, percent_match)
          select
                 $idsAndTaxa
                 evalue_mant, evalue_exp, percent_identity, percent_match
          from apidb.SimilarSequences\@orth500n ss, apidb.ProteinList${suffix} p1, apidb.ProteinList${suffix} p2
          where ss.query_id = p1.id
            and ss.subject_id = p2.id
            and mod(
                    ss.evalue_mant + ss.evalue_exp + ss.percent_identity + ss.percent_match
                    + ascii(substr(ss.query_id, -1, 1)) + ascii(substr(ss.subject_id, -1, 1))
                    + ascii(substr(ss.query_id, -2, 1)) + ascii(substr(ss.subject_id, -2, 1))
                    + ascii(substr(ss.query_id, -3, 1)) + ascii(substr(ss.subject_id, -3, 1))
                  , $chunks) = $chunk
SQL

  die "extracting similarities" unless $done;

  $insertCount += $done;
  print STDERR "$done records inserted in this chunk. $insertCount total records inserted. "
    . ( ($chunk + 1) / $chunks ) * 100 . " percent finished at " . `date` . "\n"
      if $verbose;

  $dbh->commit();
}

print STDERR "finished at " . `date` . "\n" if $verbose;

  print STDERR "dropping apidb.ProteinList${suffix} at " . `date` . "\n" if $verbose;
$dbh->do(<<SQL);
    drop table apidb.ProteinList${suffix}
SQL

  print STDERR "finished at " . `date` . "\n" if $verbose;

sub usage {
  print STDERR <<USAGE;

filterSimilarSequencesByGeneSet -suffix <suffix> [ -proteinsFile <fasta-file> ] [ -collapseClades ] [ -undo] [ -gusConfigFile <file> ] [ -verbose ]


USAGE

  die "penniless";
}
