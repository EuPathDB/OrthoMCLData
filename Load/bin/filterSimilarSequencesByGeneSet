#!/usr/bin/perl

# extract the maximal subset of the SimilarSequences table involving only proteins from the given fasta file

use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use Getopt::Long;
use GUS::Supported::GusConfig;
use GUS::ObjRelP::DbiDatabase;

my ($gusConfigFile, $suffix, $proteinsFile, $undo, $collapseClades, $verbose);
&GetOptions("gusConfigFile=s" => \$gusConfigFile,
	    "suffix=s" => \$suffix,
	    "proteinsFile=s" => \$proteinsFile,
	    "undo!" => \$undo,
	    "collapseClades!" => \$collapseClades,
	    "verbose!" => \$verbose);

&usage unless $undo || $proteinsFile;

my $gusconfig = GUS::Supported::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
                                        $gusconfig->getDatabaseLogin(),
                                        $gusconfig->getDatabasePassword(),
                                        $verbose,0,1,
                                        $gusconfig->getCoreSchemaName());

my $dbh = $db->getQueryHandle(0);

if ($undo) {

  print STDERR "truncating SimilarSequences${suffix} at " . `date` . "\n" if $verbose;
  $dbh->do(<<SQL) or die "trying to truncate apidb.SimilarSequences${suffix}";
    truncate table apidb.SimilarSequences${suffix}
SQL

  print STDERR "finished undoing at " . `date` . "\n" if $verbose;
  exit;
}

open(F, $proteinsFile) || die "Can't open proteins file '$proteinsFile' at " . `date` . "\n";

print STDERR "preparing insert statement for at " . `date` . "\n" if $verbose;
my $insert = $dbh->prepare(<<SQL) or die;
    insert into apidb.SimilarSequences$suffix
                (query_id, subject_id, query_taxon_id, subject_taxon_id,
                 evalue_mant, evalue_exp, percent_identity, percent_match)
    values (?, ?, ?, ?, ?, ?, ?, ?)
SQL

my %listedProtein;
print STDERR "reading protein file into hash at " . `date` . "\n" if $verbose;
while(<F>) {
  next unless /\>\s*(\S+)/;
  $listedProtein{$1} = 1;
}

print STDERR "preparing SimilarSequences query at " . `date` . "\n" if $verbose;
my $query = $dbh->prepare(<<SQL) or die "trying";
          select query_id, subject_id, query_taxon_id, subject_taxon_id, apidb.clade(query_taxon_id), apidb.clade(subject_taxon_id),
                 evalue_mant, evalue_exp, percent_identity, percent_match
          from apidb.SimilarSequences\@orth500n
SQL

print STDERR "executing SimilarSequences query at " . `date` . "\n" if $verbose;
$query->execute() or die;

print STDERR "iterating through rows at " . `date` . "\n" if $verbose;
my $writeCount;
while (my ($queryId, $subjectId, $queryTaxonId, $subjectTaxonId, $queryClade,
           $subjectClade, $evalueMant, $evalueExp, $percentIdentity, $percentMatch) = $query->fetchrow_array()) {

  if ($collapseClades) {
    $queryId = "$queryClade|$queryId";
    $subjectId = "$subjectClade|$subjectId";
    $queryTaxonId = $queryClade;
    $subjectTaxonId = $subjectClade;
  }

  next unless $listedProtein{$queryId} && $listedProtein{$subjectId};

  $insert->execute($queryId, $subjectId, $queryTaxonId, $subjectTaxonId, $evalueMant, $evalueExp, $percentIdentity, $percentMatch) or die "inserting";

  $writeCount++;
  if (!($writeCount % 1000000) ) {
    print STDERR "$writeCount records written\n" if $verbose;
    $dbh->commit();
  }
}

$dbh->commit();
print STDERR "finished at " . `date` . "\n" if $verbose;

sub usage {
  print STDERR <<USAGE;

filterSimilarSequencesByGeneSet -suffix <suffix> [ -proteinsFile <fasta-file> ] [ -collapseClades ] [ -undo] [ -gusConfigFile <file> ] [ -verbose ]


USAGE

  die "penniless";
}
