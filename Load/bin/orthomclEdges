#!/usr/bin/perl

use strict;
use DBI;
use DBD::Oracle;
use DBD::mysql;

=pod
SimilarSequences
| InterTaxonMatch
| | BestQueryTaxonScore
| | | BestInterTaxonScore
| | | | BetterHit
| | | | | InParalog ***
| | | | | | InParalog2way--------|
| | | BestHit                    |
| | | | Ortholog ***             |
| | | | | Ortholog2way           |
| | | | | | CoOrthologCandidate -|
| | | | | | | CoOrtholog ***
=cut

my $configFile = $ARGV[0];
my $clean = $ARGV[1];
my $restart = $ARGV[2];

my $stepCount = 1;
my @steps = (['updateMinimumEvalueExponent'],
	     ['bestQueryTaxonScore'],
	     ['qtscore_ix'],
	     ['bestInterTaxonScore'],
	     ['betterHit', ['drop table BestInterTaxonScore']],
	     ['inParalog', ['drop table BetterHit']],
	     ['bestHit', ['drop table BestQueryTaxonScore']],
	     ['ortholog', ['drop table BestHit']],
	     ['normalizeOrthologs'],
	     ['normalizeInparalogs'],
	     ['ortholog2way'],
	     ['inParalog2way'],
	     ['in2a_ix'],
	     ['in2b_ix'],
	     ['coorthologCandidate', ['drop table ortholog2way', 'drop table inparalog2way']],
	     ['coortholog', ['drop table CoOrthologCandidate']],
	     ['normalizeCoOrthologs'],
	     ['cleanall', ['truncate table inparalog', 'truncate table ortholog', 'truncate table coortholog']],
	    );

my $stepsHash;
my $cleanHash;
for (my $i=0; $i<scalar(@steps); $i++) {
    $stepsHash->{$steps[$i]->[0]} = $i+1;
    $cleanHash->{$steps[$i]->[0]} = $steps[$i]->[1] if $steps[$i]->[1];
}

&usage() unless $configFile;
usage() unless $clean =~ /clean=(yes|no|only|all)/;
$clean = $1;

my $skipPast;
if ($restart) {
  usage() unless $restart =~ /startAfter=(.*)/;
  $skipPast = $stepsHash->{$1};
  die "invalid restart arg $restart" unless $skipPast;
}

my $config = parseConfigFile($configFile);
my $sst = $config->{similarSequencesTable};

my $dbh = DBI->connect($config->{dbConnectString}, $config->{dbLogin},
		       $config->{dbPassword}) or die DBI::errstr;

commonTempTables();

inparalogs();

orthologs();

normalizeInparalogs();

coorthologs();

cleanall() if $clean eq 'all';

############################################################################

sub parseConfigFile {
  my ($configFile) = @_;

  open(F, $configFile) || die "Can't open config file '$configFile'\n";

  next if /^#/;
  my $config;
  while(<F>) {
    /(\w+)\=(.+)/ || "illegal line in config file '$_'\n";
    $config->{$1} = $2;
  }
  return $config;
}

sub commonTempTables {
  print STDERR localtime() . " Constructing common temp tables\n"
    unless $clean eq 'only' || $clean eq 'all';
  validateInputTables();
  updateMinimumEvalueExponent();
  bestQueryTaxonScore();
}

sub inparalogs {
  print STDERR localtime() . " Constructing inparalog tables\n"
    unless $clean eq 'only' || $clean eq 'all';
  bestInterTaxonScore();
  betterHit();
  inParalog();
}

sub orthologs {
  print STDERR localtime() . " Constructing ortholog tables\n"
    unless $clean eq 'only' || $clean eq 'all';
  bestHit();
  ortholog();
  normalizeOrthologs();
}

sub coorthologs {
  print STDERR localtime() . " Constructing coortholog tables\n"
    unless $clean eq 'only' || $clean eq 'all';
  inParalog2way();
  ortholog2way();
  coorthologCandidate();
  coortholog();
  normalizeCoOrthologs();
}

sub validateInputTables {

}

sub updateMinimumEvalueExponent {
  my $sql = "
update $sst
set evalue_exp = (
  select min(evalue_exp)-1
  from $sst
  where evalue_mant != 0
)
where evalue_exp = 0
";
  runSql($sql, "updating $sst, setting 0 evalue_exp to underflow value",
	 'updateMinimumEvalueExponent', '23 min');
}

sub bestQueryTaxonScore {
  my $interTaxonMatch = $config->{interTaxonMatchView};

  my $sql = "
create table BestQueryTaxonScore as
select im.query_id, im.subject_taxon_id, low_exp.evalue_exp, min(im.evalue_mant) as evalue_mant
from $interTaxonMatch im,
     (select query_id, subject_taxon_id, min(evalue_exp) as evalue_exp
      from $interTaxonMatch
      group by query_id, subject_taxon_id) low_exp
where im.query_id = low_exp.query_id
  and im.subject_taxon_id = low_exp.subject_taxon_id
  and im.evalue_exp = low_exp.evalue_exp
group by im.query_id, im.subject_taxon_id, low_exp.evalue_exp
";

  runSql($sql, "create BestQueryTaxonScore", 'bestQueryTaxonScore', '1.5 hours');

  $sql = "
create index qtscore_ix on BestQueryTaxonScore(query_id, subject_taxon_id, evalue_exp, evalue_mant)
";
  runSql($sql, "create qtscore_ix index on BestQueryTaxonScore", 'qtscore_ix', '3 min');
}

sub  bestInterTaxonScore{
  my $sql = "
create table BestInterTaxonScore as
select im.query_id, low_exp.evalue_exp, min(im.evalue_mant) as evalue_mant
from BestQueryTaxonScore im,
     (select query_id, min(evalue_exp) as evalue_exp
      from BestQueryTaxonScore
      group by query_id) low_exp
where im.query_id = low_exp.query_id
  and im.evalue_exp = low_exp.evalue_exp
group by im.query_id, low_exp.evalue_exp
";
  runSql($sql, "create BestInterTaxonScore", 'bestInterTaxonScore', '2 min');
}

sub  betterHit{
  my $pvalueExpThreshold = $config->{pvalueExpThreshold};
  my $percentMatchThreshold = $config->{percentMatchThreshold};

  my $sql = "
create table BetterHit as
select s.query_id, s.subject_id,
       s.query_taxon_id as taxon_id,
       s.evalue_exp, s.evalue_mant
from $sst s, BestIntertaxonScore bis
where s.query_id != s.subject_id
  and s.query_taxon_id = s.subject_taxon_id
  and s.query_id = bis.query_id
  and s.pvalue_exp <= $pvalueExpThreshold
  and s.percent_match >= $percentMatchThreshold
  and (s.evalue_mant < 0.001
       or s.evalue_exp < bis.evalue_exp
       or (s.evalue_exp = bis.evalue_exp and s.evalue_mant <= bis.evalue_mant))
-- . . . or Similarity for a protein with no BestIntertaxonScore
--       (i.e. an intrataxon match for a protein with no intertaxon
--        match in the database)
union
select s.query_id, s.subject_id, s.evalue_exp, s.query_taxon_id as taxon_id, s.evalue_mant
from $sst s
where s.query_taxon_id = s.subject_taxon_id
  and s.pvalue_exp <= $pvalueExpThreshold
  and s.percent_match >= $percentMatchThreshold
  and s.query_id in (select query_id from $sst
                     minus select query_id from BestIntertaxonScore)
";
  runSql($sql, "create BetterHit table", 'betterHit', '30 min');
}

sub  inParalog{
  my $inParalogTable = $config->{inParalogTable};

  my $sql = "
insert into $inParalogTable (sequence_id_a, sequence_id_b, taxon_id, unnormalized_score, normalized_score)
select bh1.query_id as sequence_id_a, bh1.subject_id as sequence_id_b,
       bh1.taxon_id,
       case -- don't try to calculate log(0) -- use rigged exponents of SimSeq
         when bh1.evalue_mant < 0.01 or bh2.evalue_mant < 0.01
           then (bh1.evalue_exp + bh2.evalue_exp) / -2
         else  -- score = ( -log10(evalue1) - log10(evalue2) ) / 2
           (log(10, bh1.evalue_mant * bh2.evalue_mant)
            + bh1.evalue_exp + bh2.evalue_exp) / -2
       end as unnormalized_score,
       cast(null as number) as normalized_score
from BetterHit bh1, BetterHit bh2
where bh1.query_id < bh1.subject_id
  and bh1.query_id = bh2.subject_id
  and bh1.subject_id = bh2.query_id
";
  runSql($sql, "populate InParalog", 'inParalog', '5 min');
}

sub bestHit {
  my $pvalueExpThreshold = $config->{pvalueExpThreshold};
  my $percentMatchThreshold = $config->{percentMatchThreshold};

  my $sql = "
create table BestHit as
select s.query_id, s.subject_id,
       s.query_taxon_id, s.subject_taxon_id,
       s.evalue_exp, s.evalue_mant
from $sst s, BestQueryTaxonScore cutoff
where s.query_id = cutoff.query_id
  and s.subject_taxon_id = cutoff.subject_taxon_id
  and s.query_taxon_id != s.subject_taxon_id
  and s.pvalue_exp <= $pvalueExpThreshold
  and s.percent_match >= $percentMatchThreshold
  and (s.evalue_mant < 0.01
       or s.evalue_exp = cutoff.evalue_exp
          and s.evalue_mant = cutoff.evalue_mant)
";
  runSql($sql, "create BestHit", 'bestHit', '45 min');
}

sub ortholog {
  my $orthologTable = $config->{orthologTable};

  my $sql = "
insert into $orthologTable (sequence_id_a, sequence_id_b, query_taxon_id, subject_taxon_id, unnormalized_score, normalized_score)
select bh1.query_id as sequence_id_a, bh1.subject_id as sequence_id_b,
       bh1.query_taxon_id, bh1.subject_taxon_id,
       case -- don't try to calculate log(0) -- use rigged exponents of SimSeq
         when bh1.evalue_mant < 0.01 or bh2.evalue_mant < 0.01
           then (bh1.evalue_exp + bh2.evalue_exp) / -2
         else  -- score = ( -log10(evalue1) - log10(evalue2) ) / 2
           (log(10, bh1.evalue_mant * bh2.evalue_mant)
            + bh1.evalue_exp + bh2.evalue_exp) / -2
       end as unnormalized_score,
       cast(null as number) as normalized_score
from BestHit bh1, BestHit bh2
where bh1.query_id < bh1.subject_id
  and bh1.query_id = bh2.subject_id
  and bh1.subject_id = bh2.query_id
";
  runSql($sql, "populate Ortholog", 'ortholog', '10 min');
}

sub normalizeOrthologs {
  my $orthologTable = $config->{orthologTable};

  my $sql = "
update $orthologTable o
set normalized_score = (
  select o.unnormalized_score / t.average
  from (
    select avg(o2.unnormalized_score) average
    from $orthologTable o2
  ) t
)
";
  runSql($sql, "updating Orthologs, setting normalized_score", 'normalizeOrthologs', '0');
}

sub normalizeInparalogs {
  my $inParalogTable = $config->{inParalogTable};
  my $orthologTable = $config->{orthologTable};

  my $sql = "
update $inParalogTable i
set normalized_score = (
 select i.unnormalized_score / t.average
 from
   (
     select decode(haveOrthologsAvg.average, null,
                   allInparalogsAvg.average,
                   haveOrthologsAvg.average) average,
             allInparalogsAvg.taxon_id
     from
       (
         select avg(i2.unnormalized_score) average, i2.taxon_id
         from $inParalogTable i2
         group by i2.taxon_id
       ) allInparalogsAvg,
       (
         select avg(i2.unnormalized_score) average, i2.taxon_id
         from $inParalogTable i2
         where (i2.sequence_id_a in
                 (select sequence_id_a from $orthologTable
                  union
                  select sequence_id_b from $orthologTable)
               )
            or (i2.sequence_id_b in 
                 (select sequence_id_a from $orthologTable
                  union 
                  select sequence_id_b from $orthologTable)
               )
         group by i2.taxon_id
       ) haveOrthologsAvg
       where allInparalogsAvg.taxon_id = haveOrthologsAvg.taxon_id
   ) t
 where i.taxon_id = t.taxon_id
)
";
  runSql($sql, "update InParalogs, setting normalized_score", 'normalizeInparalogs');
}

sub  ortholog2way {
  my $orthologTable = $config->{orthologTable};

  my $sql = "
create table ortholog2way as
-- symmetric closure of Ortholog
select sequence_id_a, sequence_id_b from $orthologTable
union
select sequence_id_b as sequence_id_a, sequence_id_a as sequence_id_b from $orthologTable
";
  runSql($sql, "create ortholog2way", 'ortholog2way', '1.5 hours');
}

sub  inParalog2way {
  my $inParalogTable = $config->{inParalogTable};

  my $sql = "
create table inparalog2way as
select sequence_id_a, sequence_id_b from $inParalogTable
union
select sequence_id_b as sequence_id_a, sequence_id_a as sequence_id_b from $inParalogTable
";
  runSql($sql, "create inParalog2way", 'inParalog2way', '1.5 hours');

  $sql = "
create index in2a_ix on inparalog2way(sequence_id_a, sequence_id_b)
";
  runSql($sql, "index in2a_ix", 'in2a_ix', '1.5 hours');

  $sql = "
create index in2b_ix on inparalog2way(sequence_id_b, sequence_id_a)
";
  runSql($sql, "index in2b_ix", 'in2b_ix', '1.5 hours');
}

sub  coorthologCandidate {
  my $sql = "
create table CoorthologCandidate as
select distinct
       least(sequence_id_a, sequence_id_b) as sequence_id_a,
       greatest(sequence_id_a, sequence_id_b) as sequence_id_b
from (-- twp-way union, part 1: inparalog-ortholog-inparalog
      select ip1.sequence_id_a, ip2.sequence_id_b
      from inparalog2way ip1, ortholog2way o, inparalog2way ip2
      where ip1.sequence_id_b = o.sequence_id_a
        and o.sequence_id_b = ip2.sequence_id_a
   union -- part 2: ortholog-inparalog
      select ip.sequence_id_a, o.sequence_id_b
      from inparalog2way ip, ortholog2way o
      where ip.sequence_id_b = o.sequence_id_a)
";
  runSql($sql, "create CoOrthologCandidate", 'coorthologCandidate', '10 min');
}

sub  coortholog {
  my $orthologTable = $config->{orthologTable};
  my $coOrthologTable = $config->{coOrthologTable};
  my $pvalueExpThreshold = $config->{pvalueExpThreshold};
  my $percentMatchThreshold = $config->{percentMatchThreshold};

  my $sql = "
insert into $coOrthologTable (sequence_id_a, sequence_id_b, unnormalized_score)
select /*+ use_nl(candidate, ab) use_nl(candidate, ba)  */
       candidate.sequence_id_a, candidate.sequence_id_b,
       case  -- in case of 0 evalue, use rigged exponent
         when ab.evalue_mant < 0.00001 or ba.evalue_mant < 0.00001
           then (ab.evalue_exp + ba.evalue_exp) / -2
         else -- score = ( -log10(evalue1) - log10(evalue2) ) / 2
           (log(10, ab.evalue_mant * ba.evalue_mant)
            + ab.evalue_exp + ba.evalue_exp) / -2
       end as unnormalized_score
from $sst ab, $sst ba,
     (select sequence_id_a, sequence_id_b from CoorthologCandidate
      minus select sequence_id_a, sequence_id_b from $orthologTable) candidate
where ab.query_id = candidate.sequence_id_a
  and ab.subject_id = candidate.sequence_id_b
  and ab.pvalue_exp <= $pvalueExpThreshold
  and ab.percent_match >= $percentMatchThreshold
  and ba.query_id = candidate.sequence_id_b
  and ba.subject_id = candidate.sequence_id_a
  and ba.pvalue_exp <= $pvalueExpThreshold
  and ba.percent_match >= $percentMatchThreshold
";
  runSql($sql, "populate CoOrtholog", 'coortholog', '30 min');
}

sub normalizeCoOrthologs {
  my $coOrthologTable = $config->{coOrthologTable};

  my $sql = "
update $coOrthologTable c
set normalized_score = (
  select c.unnormalized_score / t.average
  from (
    select avg(c2.unnormalized_score) average
    from $coOrthologTable c2
  ) t
)
";
  runSql($sql, "updating CoOrthologs, setting normalized_score", 'normalizeCoOrthologs', '0');
}

sub runSql {
  my ($sql, $msg, $tag, $sampleTime) = @_;

  my $stepNumber = $stepsHash->{$tag};
  die "invalid tag '$tag'" unless $stepNumber;

  if ($skipPast >= $stepNumber) {
    print STDERR "... skipping '$tag'...\n\n";
    return;
  }

  if ($clean ne 'only' && $clean ne 'all') {
      my $t = time();

      print STDERR localtime() . "   $msg  (OrthoMCL-DB V2 took $sampleTime for this step)\n";

      my $stmt = $dbh->prepare($sql) or die DBI::errstr;
      $stmt->execute() or die DBI::errstr;

      my $tt = time() - $t;
      my $hours = int($tt / 3600);
      my $mins = int($tt / 60) % 60;
      if ($hours == 0 && $mins == 0) {$mins = 1};
      my $hoursStr = $hours? "$hours hours and " : "";
      print STDERR localtime() . "   step '$tag' done ($hoursStr$mins mins)\n\n";
  }

  clean($tag) unless ($clean eq 'no');
}

sub clean {
  my ($tag) = @_;

  my $cleanSqls = $cleanHash->{$tag};
  foreach my $cleanSql (@$cleanSqls) {
    if ($cleanSql) {
      $cleanSql =~ /(\w+) table (\w+)/i || die "invalid clean sql '$cleanSql'";
      my $action = $1;
      my $table = uc($2);
      if ($action eq 'drop') {
	my $stmt = $dbh->prepare("select * from all_tables where table_name = '$table'" ) or die DBI::errstr;
	$stmt->execute() or die DBI::errstr;
	return unless $stmt->fetchrow();
      }
      my $stmt = $dbh->prepare($cleanSql) or die DBI::errstr;
      print STDERR localtime() . "   cleaning: $cleanSql\n";
      $stmt->execute() or die DBI::errstr;
      print STDERR localtime() . "   done\n";
    }
  }
}

sub cleanall {
    foreach my $tag (keys (%$cleanHash)) {
	clean($tag);   
    }
}

sub usage {
  my $stepsString;
  map { $stepsString .= "  $_->[0]\n" } @steps;

  print "
Find edges for OrthoMCL.

usage: orthomclEdges config_file cleanup=[yes|no|only|all] <startAfter=TAG>

where:
  config_file : see below
  cleanup     : clean up temp tables? 
                   yes=clean as we go; 
                   no=don't clean as we go; 
                   only=just clean, do nothing else; 
                   all=just clean, InParalog, Ortholog and CoOrtholog.
  startAfter  : optionally start after a previously completed step. see below for TAGs

Database Input:
  - SimilarSequences table containing all-v-all BLAST hits
  - InParalog, Ortholog, CoOrtholog tables - created but empty

Database Output:
  - Populated InParalog, Ortholog and CoOrtholog tables

Standard Output:
  - matrix file as expected by MCL.

Standard Error:
  - logging info


Sample Config File:

dbVender=oracle  (or mysql)
dbConnectString=dbi:Oracle:orthomcl
dbLogin=my_db_login
dbPassword=my_db_password
similarSequencesTable=apidb.SimilarSequences
orthologTable=apidb.Ortholog
inParalogTable=apidb.InParalog
coOrthologTable=apidb.CoOrtholog
interTaxonMatchView=apidb.InterTaxonMatch
percentMatchCutoff=50
evalueExponentCutoff=-5

Names of TAGs to use in startAfter (look in log file to see last one run)
$stepsString
";
  exit(1);
}

