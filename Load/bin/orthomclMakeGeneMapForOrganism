#!/usr/bin/perl
 
use strict;

usage() unless scalar(@ARGV) == 4;

my ($fastaFile, $ncbiTaxonId, $dir, $ensemblLookupExtraTime) = @ARGV;

my $uniprotFile = "geneMappingsFromUniprot.txt";
my $ensemblFile = "ensembl.gtf";
my $finalOutputFile = "finalGeneMapping.txt";

chdir($dir);


=pod


# download Uniprot gene mapping file
print STDERR localtime()."\n";
print STDERR "Downloading gene Ids and names from Uniprot.\n";
my $cmd = "wget \"http://www.uniprot.org/uniprot/?&query=taxonomy:${ncbiTaxonId}&format=tab&columns=genes,id,database(refseq),database(ensembl),database(vectorbase),database(eupathdb)\" -qO $uniprotFile";
print STDERR "$cmd\n";
system($cmd);

# look into Uniprot file for Ensembl transcript. Use this to determine species and get Ensembl GTF file 
print STDERR localtime()."\n";
print STDERR "Determining whether the Uniprot file '$uniprotFile' has Ensembl transcript IDs. If so, attempting to obtain the Ensembl species name and download GTF from Ensembl.\n";
my ($txFound,$species,$gtfDownloaded) = useEnsemblTranscriptsToGetGtfFile($uniprotFile,$ensemblFile);
print STDERR localtime()."\n";
if ($txFound == 0) {
    print STDERR "There are no Ensembl IDs.\n";
} else {
    print STDERR "There are Ensembl IDs. ";
}
if ($species eq "") {
    print STDERR "A species was not determined.\n";
} else {
    print STDERR "The species is $species. ";
}
if ($gtfDownloaded == 0) {
    print STDERR "The GTF file was NOT downloaded.\n";
} else {
    print STDERR "The GTF file, $ensemblFile, was downloaded.\n";
}


=cut


my $gtfDownloaded = 1;

# if there is Ensembl GTF file, use to create hashes with geneId geneNames transcriptIds and proteinIds
my ($txIdToGeneId,$txIdToProteinId,$geneIdToTxId,$geneIdToGeneName);
if ($gtfDownloaded == 1) {
    ($txIdToGeneId,$txIdToProteinId,$geneIdToTxId,$geneIdToGeneName) = createEnsemblGeneTranscriptHash($ensemblFile);
}

print "${$txIdToGeneId}{ENST00000553781}\n";
print "${$txIdToGeneId}{ENST00000557008}\n";
print "${$txIdToGeneId}{ENST00000250405}\n";

# loop through protein sequence Fasta file to get protein Ids to keep
print STDERR localtime()."\n";
print STDERR "Reading the $fastaFile file to get proteins to keep in the mapping file\n";
open(FASTA, $fastaFile) || die "Can't open '$fastaFile' for reading.\n";
my %proteinsToKeep;
while(<FASTA>) {
    if ($_ =~ /^>[A-Za-z]{2}\|([^|]+)\|/) {
	$proteinsToKeep{$1} = 1;
    }
}
close(FASTA);
my $numProteinsToKeep = scalar keys %proteinsToKeep;
print STDERR "There are $numProteinsToKeep proteins in $fastaFile\n";

# loop through Uniprot file, order of columns: genes,uniprot,refseq,ensembl,vectorbase,eupath
# format and output
#writing to final output file
print STDERR localtime()."\n"; 
print STDERR "Reading the $uniprotFile file, and outputting re-formatted columns to $finalOutputFile\n";
open(UNIPROT, $uniprotFile) || die "Can't open '$uniprotFile' for reading.\n";                            
my $header = <UNIPROT>;
die "Query to Uniprot did not provide expected header" unless $header =~ /^Gene name/;  
open(OUT, ">$finalOutputFile") || die "Can't open '$finalOutputFile' for writing.\n";
print OUT "UniprotGeneName\tUniprotIds\tRefSeqProteinNames\tRefSeqLocusNames\tEnsemblTranscriptIds\tEnsemblGeneIds\tEnsemblProteinIds\tEnsemblGeneNames\tVectorbaseGenes\tVectorbaseTranscripts\n";

if ($ensemblLookupExtraTime =~ /^[Yy]/ && $gtfDownloaded ==1) {
    print STDERR "Ensembl web lookup is being performed for Ensembl transcripts that can't be found in the Ensembl GTF file.\n";
    print STDERR "Total number of genes is $numProteinsToKeep\n";
}

my $geneCount=0;
while (<UNIPROT>) {
    my $line = $_;
    chomp $line;
    my @fields = split("\t",$line);
    my $uniprotGeneNames = formatFieldFromUniprot($fields[0]);
#    @$uniprotGeneName = ($$uniprotGeneName[0]);   # only keep first name
    my $uniprotIds = formatFieldFromUniprot($fields[1]);
    die "There are more than one Uniprot Ids: $line\n" if (scalar @$uniprotIds >1);
    next if (!exists($proteinsToKeep{$$uniprotIds[0]}));
     
    my ($refseqProteins,$refseqLoci) = refseqProteinsLoci(formatFieldFromUniprot($fields[2]));
    my $ensemblTranscripts = formatFieldFromUniprot($fields[3]);
    my $ensemblGenes=[];
    my $ensemblProteins=[];
    my $ensemblGeneNames=[];
    if ($gtfDownloaded == 1) {
	ensemblTxToGeneProtein($ensemblTranscripts,$ensemblGenes,$ensemblProteins,$ensemblGeneNames,$txIdToGeneId,$txIdToProteinId);

#	getEnsemblGeneTxProtein($ensemblTranscripts,$ensemblGenes,$ensemblProteins,$ensemblGeneNames,$txIdToGeneId,$txIdToProteinId,$geneIdToTxId,$geneIdToGeneName,$ensemblLookupExtraTime);
    }
    my ($vbGenes,$vbTxs) = vectorbaseGenesTxs(formatFieldFromUniprot($fields[4]));
    my $eupathGenes = formatFieldFromUniprot($fields[5]);
    @$ensemblGeneNames = ($$ensemblGeneNames[0]);   # only keep first name 
    @$vbGenes = ($$vbGenes[0]);   # only keep first name 
    @$eupathGenes = ($$eupathGenes[0]);   # only keep first name 
    my $a = join(" ",@$uniprotGeneNames);
    my $b = join(" ",@$uniprotIds);
    my $c = join(" ",@$refseqProteins);
    my $d = join(" ",@$refseqLoci);
    my $e = join(" ",@$ensemblTranscripts);
    my $f = join(" ",@$ensemblGenes);
    my $g = join(" ",@$ensemblProteins);
    my $h = join(" ",@$ensemblGeneNames);
    my $i = join(" ",@$vbGenes);
    my $j = join(" ",@$vbTxs);
    my $k = join(" ",@$eupathGenes);
    print OUT join("\t",($a,$b,$c,$d,$e,$f,$g,$h,$i,$j,$k));
    print OUT "\n";
    if ($ensemblLookupExtraTime =~ /^[Yy]/) {
	$geneCount++;
	if ($geneCount%100 == 0) {
	    print STDERR "$geneCount genes\n";
	}
    }
}
close(OUT);

print STDERR localtime()."\n";
print STDERR "Finished writing $finalOutputFile\n";

exit;




sub refseqProteinsLoci {
    my ($all) = @_;
    my %proteins;
    my %loci;
    foreach my $id (@$all) {
	if ($id =~ /^[A-Za-z]{2}_[0-9]+$/) {
	    $loci{$id}=1;
	} elsif ($id =~ /^([A-Za-z]{2}_[0-9]+)\.[0-9]{1,2}$/) {
	    $loci{$1}=1;
	    $proteins{$id}=1;
	} else {
	    die "This does not appear to be a refseq or uniprot protein: $id\n";
	}
    }
    my $proteinsRef = [keys %proteins];
    my $lociRef = [keys %loci];
    return ($proteinsRef,$lociRef);
}


sub vectorbaseGenesTxs {
    my ($all) = @_;
    my %genes;
    my %txs;
    foreach my $id (@$all) {
	if ($id =~ /^[A-Za-z]{4}\d{6}$/) {
	    $genes{$id}=1;
	} elsif ($id =~ /^[A-Za-z]{4}\d{6}-[A-Za-z]{2}$/) {
	    $txs{$id}=1;
	    $genes{substr $id,0,10}=1;
	} else {
	    die "This does not appear to be a Vectorbase gene or transcript: $id.\n";
	}
    }
    my $genesRef = [keys %genes];
    my $txsRef = [keys %txs];
    return ($genesRef,$txsRef);
}


sub addToArrayAndSort {
    my ($destinationArrayRef,$sourceArrayRef) = @_;
    return if (scalar @$sourceArrayRef == 0);
    my %hash = map { $_, 1 } @$destinationArrayRef;
    $hash{$_}=1 foreach (@$sourceArrayRef);
    @$destinationArrayRef = sort keys %hash;
    return;
}

sub formatFieldFromUniprot {
    my ($ids) = @_;
    $ids =~ s/\[[^\]]+]//g;
    my @array = split(/[ ;\/]+/,$ids);
    return \@array;
}



sub getEnsemblGeneTxProtein {
    my ($ensemblTranscripts,$ensemblGenes,$ensemblProteins,$ensemblGeneNames,$txIdToGeneId,$txIdToProteinId,$geneIdToTxId,$geneIdToGeneName,$ensemblLookupExtraTime) = @_;
    my %newGenes;
    my %newProteins;
    my %newTxs;
    my %newGeneNames;
    foreach my $transcript (@$ensemblTranscripts) {
	$newTxs{$transcript}=1;
	if (exists(${$txIdToGeneId}{$transcript})) {
	    $newGenes{${$txIdToGeneId}{$transcript}}=1;
	} elsif ($ensemblLookupExtraTime =~ /^[Yy]/) {
	    #look up each transcript at ensembl.org if not found in GTF file
	    my $foundGene = extraLookupEnsemblGene($transcript); 
	    if ($foundGene ne "") {
		$newGenes{$foundGene}=1;
	    }
	}
	if (exists(${$txIdToProteinId}{$transcript})) {
	    $newProteins{${$txIdToProteinId}{$transcript}}=1;
	}
    }
    foreach my $gene (keys %newGenes) {
	if (exists(${$geneIdToTxId}{$gene})) {
            foreach my $geneTx (@{${$geneIdToTxId}{$gene}}) {
		$newTxs{$geneTx}=1;
		if (exists(${$txIdToProteinId}{$geneTx})) {
		    $newProteins{${$txIdToProteinId}{$geneTx}}=1;
		}
	    }
	}
	if (exists(${$geneIdToGeneName}{$gene})) {
	    $newGeneNames{${$geneIdToGeneName}{$gene}}=1;
	}
    }
    @$ensemblGeneNames = keys %newGeneNames;
    @$ensemblTranscripts = keys %newTxs;
    @$ensemblGenes = keys %newGenes;
    @$ensemblProteins = keys %newProteins;
    return;
}


sub ensemblTxToGeneProtein {
    my ($ensemblTranscripts,$ensemblGenes,$ensemblProteins,$ensemblGeneNames,$txIdToGeneId,$txIdToProteinId) = @_;
    my %newGenes;
    my %newProteins;
    my %newTxs;
    my %newGeneNames;
    foreach my $transcript (@$ensemblTranscripts) {
	$newTxs{$transcript}=1;
	if (exists(${$txIdToGeneId}{$transcript})) {
	    $newGenes{${$txIdToGeneId}{$transcript}}=1;
	    my $numGenes = scalar keys %newGenes;
	    if ($numGenes > 1) { 
		print STDERR "$_ " foreach (keys %newTxs);
		print STDERR "\n";
		print STDERR "$_ " foreach (keys %newGenes);
		print STDERR "\n";
		print STDERR "$_ " foreach (keys %newProteins);
		print STDERR "\n";
		die "There are more than one Ensembl gene Ids (listed above) associated with this transcript: $transcript\n";
	    }
	} 
	if (exists(${$txIdToProteinId}{$transcript})) {
	    $newProteins{${$txIdToProteinId}{$transcript}}=1;
	}
    }
    @$ensemblGeneNames = keys %newGeneNames;
    @$ensemblTranscripts = keys %newTxs;
    @$ensemblGenes = keys %newGenes;
    @$ensemblProteins = keys %newProteins;
    return;
}



sub extraLookupEnsemblGene {
    my ($transcript) = @_;
    my $cmd = "wget \"https://rest.ensembl.org/lookup/id/".$transcript."?expand=0\" -qO-";
    open(ENSEMBL, "$cmd |");
    my $foundGene = "";
    while(<ENSEMBL>) {
	if ($_ =~ /^Parent: (\S+)/) {
	    $foundGene = $1;
	    close(ENSEMBL);
	    last;
	}
    }
    return $foundGene;
}

sub useEnsemblTranscriptsToGetGtfFile {
    my ($uniprotFile,$ensemblFile) = @_;
    open(UNIPROT, $uniprotFile) || die "Can't open $uniprotFile for reading.\n";
    my $header = <UNIPROT>;
    die "Query to Uniprot did not provide expected header" unless $header =~ /^Gene name/;
    my ($txFound,$species,$gtfDownloaded) = (0,"",0);
    while(<UNIPROT>) {
	my $line = $_;
	chomp $line;
	my ($gene,$uniprot,$refseq,$ensembl,$vectorbase,$eupath) = split("\t",$line);
	next if ($ensembl !~ /T\d+/);
	$txFound = 1;
	my $currentTxs = formatFieldFromUniprot($ensembl);
	foreach my $tx (@$currentTxs) {
	    $species = getSpeciesFromTranscript($tx);
	    if ($species ne "") {
       		$gtfDownloaded = getEnsemblGtfFromSpecies($species,$ensemblFile);
		if ($gtfDownloaded == 1) {
		    close(UNIPROT);
		    return ($txFound,$species,$gtfDownloaded);
		}
	    }
	} 
    }
    close(UNIPROT);
    return ($txFound,$species,$gtfDownloaded);
}

sub getSpeciesFromTranscript {
    my ($transcript) = @_;
    my $cmd = "wget \"https://rest.ensembl.org/lookup/id/".$transcript."?expand=0\" -qO-";
    open(ENSEMBL, "$cmd |");
    my $species = "";
    while(<ENSEMBL>) {
	if ($_ =~ /^species: (\S+)/) {
	    $species = $1;
	    close(ENSEMBL);
	    last;
	}
    }
    return $species;
}

sub getEnsemblGtfFromSpecies {
    my ($species,$ensemblFile) = @_;
    my $speciesCap = ucfirst($species);
    my $cmd = "wget \"ftp://ftp.ensembl.org/pub/release-97/gtf/".$species."/".$speciesCap."*97.gtf.gz\" -qO ".$ensemblFile.".gz";
    system($cmd);
    $cmd = "gunzip -d ".$ensemblFile.".gz";
    system($cmd);
    if (-e $ensemblFile) {
	return 1;
    } else {
	return 0;
    }
}


sub createEnsemblGeneTranscriptHash {
    my ($ensemblFile) = @_;
    print STDERR localtime()."\n"; 
    print STDERR "Putting Ensembl transcripts and genes into hashes. These genes and transcripts will be put into the mapping file.\n";
    open(ENSEMBL,$ensemblFile) || die "Can't open '$ensemblFile' for reading.\n";
    my (%txIdToGeneId,%txIdToProteinId,%geneIdToTxId,%geneIdToGeneName);
    while (<ENSEMBL>) {
	my $line = $_;
	chomp $line;
	my @fields = split("\t",$line);
	my $numFields = scalar @fields;
	next if $numFields < 2;
	die "Too few fields: $numFields\n$line\n" if ($numFields != 9);
	next if ($fields[2] ne "CDS");
	die "Did not find gene id when expected.\n$line\n" if ($fields[8] !~ /gene_id "(\S+)"/);
	my $geneId = $1;
	die "Did not find transcript id when expected.\n$line\n" if ($fields[8] !~ /transcript_id "(\S+)"/);
	my $transcriptId = $1;
	die "Did not find protein id when expected.\n$line\n" if ($fields[8] !~ /protein_id "(\S+)"/);
	my $proteinId = $1;
	die "Did not find gene name when expected.\n$line\n" if ($fields[8] !~ /gene_name "(\S+)"/);
	my $geneName = $1;
	if ($transcriptId eq "ENST00000553781" || $transcriptId eq "ENST00000557008" || $transcriptId eq "ENST00000250405") {
	    print "$transcriptId $proteinId $geneId $geneName \n"; 
	}
	if (!exists($geneIdToTxId{$geneId})) { 
	    $geneIdToTxId{$geneId} = [];
	    $geneIdToGeneName{$geneId} = $geneName;
	}
	if (exists($txIdToGeneId{$transcriptId})) {
	    if ($txIdToGeneId{$transcriptId} ne $geneId) {
		die "There is more than one gene associated with this transcript: $transcriptId\n";
	    }
	    if ($txIdToProteinId{$transcriptId} ne $proteinId) {
		die "There is more than one protein associated with this transcript: $transcriptId\n";
            }
	} else { 
	    push @{$geneIdToTxId{$geneId}}, $transcriptId;
	    $txIdToGeneId{$transcriptId}=$geneId;
	    $txIdToProteinId{$transcriptId}=$proteinId;
	}
    }
    close(ENSEMBL);
    return (\%txIdToGeneId,\%txIdToProteinId,\%geneIdToTxId,\%geneIdToGeneName);
}

sub getGeneNamesHashFromFasta {
    my ($fastaFile) = @_;
    my %geneNames;
    open(FASTA, $fastaFile) || die "Can't open '$fastaFile' for reading.\n";
    while(<FASTA>) {
	my $line = $_;
	chomp $line;
	if ($line =~ /^>\S+\|(\S+)/) {
	    $geneNames{$1}=1;
	}
    }
    close(FASTA);
    return \%geneNames;
}


sub getGeneNameFromMappingFile {
    my ($fields,$geneNamesHashRef) = @_;
    my $geneName= "";
    foreach my $eachField (@$fields) {
	my $genes = formatFieldFromUniprot($eachField);
	foreach my $eachGene (@$genes) {
	    if (exists(${$geneNamesHashRef}{$eachGene})) {
		if ($geneName ne "" && $geneName ne $eachGene) {
		    die "There are two genes in the same row that match different orthomcl genes: $geneName $eachGene\n";
		}
		$geneName = $eachGene;
	    } 
	}
    }
    return ($geneName);
}



sub usage {

die "
Make a fasta file that is orthomcl compliant, for a uniprot proteome.

Usage: orthomclMakeCompliantUniprotFasta input_fasta_file output_fasta_file abbrev ncbi_taxon_id

Where: 
  input_fasta_file:             uniprot fasta file
  output_fasta_file:            the file to write to
  abbrev:                       the organism abbreviation for this proteome
  ncbi_taxon_id:                the ncbi taxon id for this organism

Use wget to access a uniprot query to get the protein to gene id (RefSeq protein) mapping.

sample input defline: >sp|D0VWU4|SECE_AQUAE Protein translocase subunit SecE OS=Aquifex aeolicus (strain VF5) OX=224324 GN=secE PE=1 SV=1          

sample output defline: >aaeo|NP_214325 proteinId=D0VWU4 product=Protein translocase subunit SecE  

";
}
