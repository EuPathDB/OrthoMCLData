#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use CBIL::Util::PropertySet;
use DBI;

my $dbh;
my $residualsFile = "/eupath/data/EuPathDB/devWorkflows/OrthoMCL/testdata/planBResiduals.fasta";

print STDERR "Tier 1: running ortholog-groups workflow on representatives\n";
# system("workflow -h /eupath/data/EuPathDB/devWorkflows/OrthoMCL/planBtier1 -r");

# for each non-representative protein, find its best match among representative proteins
print STDERR "callingFindRepresentatives() to find a representative protein for each secondary protein\n";
findRepresentatives();

# run ortholog-groups workflow on residuals
# system("workflow -h /eupath/data/EuPathDB/devWorkflows/OrthoMCL/planBtier2 -r");

sub getDbHandle {

  my $gusConfigFile = $ENV{GUS_HOME} . "/config/gus.config";
  my @properties = ();
  my $gusconfig = CBIL::Util::PropertySet->new($gusConfigFile, \@properties, 1);

  my $u = $gusconfig->{props}->{databaseLogin};
  my $pw = $gusconfig->{props}->{databasePassword};
  my $dsn = $gusconfig->{props}->{dbiDsn};

  my $dbh = DBI->connect($dsn, $u, $pw) or die DBI::errstr;
  $dbh->{RaiseError} = 1;
  $dbh->{AutoCommit} = 0;

  return $dbh;
}

sub findRepresentatives {

  $dbh = getDbHandle();

  my $repsDir = "/eupath/data/EuPathDB/devWorkflows/OrthoMCL/testdata/representatives";
  chdir $repsDir || die "Can't chdir to '$repsDir'\n";
  my @taxonNames = map {/(\w+).fasta/; "'$1'"; } <*.fasta>;
  my $representativeTaxa = join(', ', @taxonNames);

  my $pvalueExponentCutoff = 0; # no cutoff at all

  # open residuals file
  open(my $fh, ">", $residualsFile)
    or die "cannot open residuals file \"$residualsFile\" for writing: $!";

  # prepare query for secondary (that is, non-representative) protein IDs
  my $secondaryQuery = $dbh->prepare(<<SQL);
    select distinct query_id
    from apidb.SimilarSequences\@orth500n
    where query_taxon_id not in ($representativeTaxa)
SQL

  # prepare the query that, for a given non-representative protein, finds its best match among representatives
  my $repQuery = $dbh->prepare(<<SQL);
    select subject_id
    from apidb.SimilarSequences\@orth500n
    where query_id = ?
      and subject_taxon_id in ($representativeTaxa)
      and evalue_exp <= $pvalueExponentCutoff
    order by evalue_exp, evalue_mant desc
SQL

  # prepare the statement that inserts a (constituent, representative) pair into OrthoRepresentation
  my $insertStmt = $dbh->prepare(<<SQL);
    insert into apidb.OrthoRepresentation (constituent, representative) values (?, ?)
SQL


  $secondaryQuery->execute();
  my $writeCount;
  while (my($secondary) = $secondaryQuery->fetchrow_array()) {

    # find this protein's representative
    $repQuery->execute($secondary);
    my ($representative) = $repQuery->fetchrow_array();
    $repQuery->finish();

    if ($representative) {
      # we found a representative; insert the representative/constituent pair
      $insertStmt->execute($secondary, $representative);
    } else {
      # no representative found; write this protein ID to the residuals file
      print $fh "> $secondary\n";
    }
  }

  $secondaryQuery->finish();

  close($fh)
    or warn "close failed: $!";

}
