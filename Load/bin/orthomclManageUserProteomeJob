#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";

=pod 

probe the state of orthomcl user's proteome analysis jobs

should be called by cron once every few minutes

** config file **
controlDir=
clusterServer=
clusterUserName=
clusterQueue=
numNodes=
slotsPerNode=
ppn=
nodePath=
nodeClass=
taskSize=
taskClass=
subjectFile=
groupsFile=
blastArgs=
blastBinDir=


** local dir structure **
controlDir/
  newJobs/
    92hty2k/
      info.txt
      proteome.fasta
  runningJobs/
    i83j89/
      info.txt
      input/
        controller.prop
        task.prop
      master/
      proteome.fasta
      
      
** cluster dir structure **
orthomclUserProteomeJobs
  i83j89/
    info.txt
    input/
    master/   
    processId 
    proteome.fasta


** info.txt file **
email=
fastaFileName=
submitTime=

=cut

usage() unless scalar(@ARGV) == 1;

my $configFile = $ARGV[0];
my $config;

eval {

    handleNewJobs();

    my $doneJobs = checkRunningJobs();

    handleCompletedJobs($doneJobs);
}

##################################################
# handle new jobs 
##################################################
sub handleNewJobs {
    my $controlDir = getConfig('controlDir');

    # find all subdirs of newJobs/ (put there by front end)
    opendir(DIR, "$controlDir/newJobs") || die "Can't open newJobs/ directory '$controlDir/newJobs'\n";
    my @newJobs = readdir(DIR);
    closedir(DIR);

    foreach my $newJob (@newJobs) {
	next if $newJob =~ /^\./;
	my $jobDir = "$controlDir/newJobs/$newJob";

	validateProteomeFile("$jobDir/proteome.fasta");

       # move dir from new/ to running/

       # build input/ dir

       # build master/ dir

       # copy to cluster

       # start job
    }

}

sub validateProteomeFile {
    my ($proteomeFile) = @_;
}



##################################################
# handle running jobs
##################################################

# check process id of workflowclusterjob on cluster, based on processId file

# if failed, notify user and admin

# if done, handle complted job


##################################################
# handle completed jobs
##################################################

# copy result from cluster

# map to groups

# deliver result

# clean up cluster server






#####################################################################

sub makeClusterControllerPropFile {
  my ($self, $taskInputDir, $slotsPerNode, $taskSize, $taskClass) = @_;

  my $nodePath = $self->getGlobalConfig('nodePath');
  my $nodeClass = $self->getGlobalConfig('nodeClass');

  # tweak inputs
  my $masterDir = $taskInputDir;
  $masterDir =~ s/input/master/;
  $nodeClass = 'DJob::DistribJob::BprocNode' unless $nodeClass;

  # get configuration values
  my $nodePath = $self->getGlobalConfig('nodePath');
  my $nodeClass = $self->getGlobalConfig('nodeClass');

  # construct dir paths
  my $localDataDir = $self->getLocalDataDir();
  my $computeClusterDataDir = $self->getComputeClusterDataDir();

  # print out the file
  my $controllerPropFile = "$localDataDir/$taskInputDir/controller.prop";
  open(F, ">$controllerPropFile")
      || $self->error("Can't open controller prop file '$controllerPropFile' for writing");
  print F 
"masterdir=$computeClusterDataDir/$masterDir
inputdir=$computeClusterDataDir/$taskInputDir
nodedir=$nodePath
slotspernode=$slotsPerNode
subtasksize=$taskSize
taskclass=$taskClass
nodeclass=$nodeClass
restart=no
";
    close(F);
}

sub run {
  my ($self, $test, $undo) = @_;

  # get parameter values
  my $taskInputDir = $self->getParamValue("taskInputDir");
  my $queryFile = $self->getParamValue("queryFile");
  my $subjectFile = $self->getParamValue("subjectFile");
  my $blastArgs = $self->getParamValue("blastArgs");
  my $idRegex = $self->getParamValue("idRegex");
  my $blastType = $self->getParamValue("blastType");
  my $vendor = $self->getParamValue("vendor");

  my $taskSize = $self->getConfig('taskSize');
  my $wuBlastBinPathCluster = $self->getConfig('wuBlastBinPathCluster');
  my $ncbiBlastBinPathCluster = $self->getConfig('ncbiBlastBinPathCluster');

  my $blastBinPathCluster = ($vendor eq 'ncbi')?  $ncbiBlastBinPathCluster : $wuBlastBinPathCluster;

  my $dbType = ($blastType =~ m/blastn|tblastx/i) ? 'n' : 'p';

  my $computeClusterDataDir = $self->getComputeClusterDataDir();
  my $localDataDir = $self->getLocalDataDir();

  if ($undo) {
    $self->runCmd(0, "rm -rf $localDataDir/$taskInputDir/");
  }else {
      if ($test) {
	  $self->testInputFile('queryFile', "$localDataDir/$queryFile");
	  $self->testInputFile('subjectFile', "$localDataDir/$subjectFile");
      }

      $self->runCmd(0,"mkdir -p $localDataDir/$taskInputDir");

      # make controller.prop file
      $self->makeClusterControllerPropFile($taskInputDir, 2, $taskSize,
				       "DJob::DistribJobTasks::BlastSimilarityTask"); 
      # make task.prop file
      my $ccBlastParamsFile = "blastParams";
      my $localBlastParamsFile = "$localDataDir/$taskInputDir/blastParams";
      my $vendorString = $vendor? "blastVendor=$vendor" : "";

      my $taskPropFile = "$localDataDir/$taskInputDir/task.prop";
      open(F, ">$taskPropFile") || die "Can't open task prop file '$taskPropFile' for writing";

      print F
"blastBinDir=$blastBinPathCluster
dbFilePath=$computeClusterDataDir/$subjectFile
inputFilePath=$computeClusterDataDir/$queryFile
dbType=$dbType
regex='$idRegex'
blastProgram=$blastType
blastParamsFile=$ccBlastParamsFile
$vendorString
";
       close(F);

       # make blastParams file
       open(F, ">$localBlastParamsFile") || die "Can't open blast params file '$localBlastParamsFile' for writing";;
       print F "$blastArgs\n";
       close(F);
       #&runCmd($test, "chmod -R g+w $localDataDir/similarity/$queryName-$subjectName");
      
  }
}


sub getConfig {}
