#!/usr/bin/perl

use strict;

usage() if scalar(@ARGV) < 3;

my ($ncbi_taxon_id, $proteome_id, $output_map_file, $organismName) = @ARGV;

=head
AC   Q7ZVB2; Q6NYB3;
DR   Ensembl; ENSDART00000100283; ENSDARP00000091056; ENSDARG00000069100.
DR   Ensembl; ENSDART00000137838; ENSDARP00000118280; ENSDARG00000069100.
DR   GeneID; 100005587; -.
//
AC   Q802W2; A2AWD6;
DR   Ensembl; ENSDART00000053868; ENSDARP00000053867; ENSDARG00000037061.
DR   GeneID; 399481; -.
//
AC   Q8JG69;
DR   GeneID; 266755; -.
//
AC   Q8JG70;
//
=cut

my @localAccessions;
my %localGenes;
my @localEntrezGenes;
my @localEnsemblGenes;
my $proteinsCount;
my %gene2repGene;  # map gene to its alphabetically best equivalent
my %protein2gene;
my $uniqueProteinsCount;

my $url = "\"http://www.uniprot.org/uniprot/?query=taxonomy:$ncbi_taxon_id+AND+proteome:$proteome_id&format=txt\"";

#print STDERR "$url\n";

open(W, "wget $url -qO- |") || die "Failed running 'wget $url -qO-'\n";
my @allProteins;
while(<W>) {
  chomp;

  # handle a new set of accessions
  if (/^AC/) {
    $uniqueProteinsCount++;
    my $line = $_;
    my @a = split(/\s+/, $line);
    shift(@a);  #lose AC
    @localAccessions = map { s/;//; $_; } @a;  # lose trailing semi-colon on accessions
    %localGenes = ();
  }

  # an entrez gene ID
  elsif (/^DR\s+GeneID;/) {
    /^DR\s+GeneID;\s+(\d+);\s+\-\.$/ || die "DR GeneID line not in expected format\n$_\n";
    $localGenes{$1} = 1;
  }

  # an ensembl gene ID
  elsif (/^DR\s+Ensembl;/) {
    /^DR\s+Ensembl;.+(ENS\w*G\d+)\./ || die "DR Ensembl line not in expected format\n$_\n";
    $localGenes{$1} = 1;
  }

  # process this completed record
  elsif (/^\/\//) {

    # remember a gene id for these proteins
    my $gene = (keys(%localGenes))[0];  # choose any gene id to map protein to. will improve later.
    foreach my $acc (@localAccessions) {
      $proteinsCount++;
      $protein2gene{$acc} = $gene if ($gene);
      push(@allProteins, $acc);
    }

    # for these gene ids, map to their best rep (alphabetically)
    my @sortedLocalGenes = sort(keys(%localGenes));
    foreach my $g (@sortedLocalGenes) {
      $gene2repGene{$g} = $sortedLocalGenes[0] unless $gene2repGene{$g} && $gene2repGene{$g} lt $sortedLocalGenes[0];
    }
  }
}
close(W);

die "Error: found no proteins.  Perhaps there is a mismatch between ncbi tax id and uniprot proteome id\n" unless $proteinsCount;

# pass through gene to gene mapping, to find the best rep for each gene
#   - iterate in alphabetical order
#   - this way we find the preferred reps first
#   - if a gene maps to another gene, use that genes's rep, as it is the most preferred
print STDERR "Finding representative Gene IDs\n";
foreach my $g (sort(keys(%gene2repGene))) {
  my $rep = $gene2repGene{$g};
  $gene2repGene{$g} = $gene2repGene{$rep};   # my rep is my rep's rep.
}

# count unique rep genes
my %repGenes;
foreach my $r (values(%gene2repGene)) { $repGenes{$r} = 1; }
my $genesCount = scalar(keys(%repGenes));

# if we have a low gene count, assume it is bacterial, and use the protein id as gene id
# but, if we also have a high protein count, it can't be bacterial, so there is a problem.
my $doNotUseGenes;
if ($genesCount < 1000) {
  die "Error: messed up proteome.  Too few Genes ($genesCount) and too many proteins ($uniqueProteinsCount)\n" if ($uniqueProteinsCount > 10000);
  $doNotUseGenes = 'yes';
}

print STDERR "Mapping proteins to rep proteins\n";
open(M, ">$output_map_file") || die "Can't open output map file '$output_map_file' for writing\n";

my $mappedProteinsCount;
if ($doNotUseGenes) {
  foreach my $p (@allProteins) {
  print M "$p\t$p\n";
  }
} else {
  foreach my $p (keys(%protein2gene)) {
    $mappedProteinsCount++;
    my $repGene = $gene2repGene{$protein2gene{$p}};
    print M "$p\t$repGene\n";
  }
}
my $org = $organismName? " $organismName" : "";
my @report = ("Uniprot Count Summary:", "taxon: ${ncbi_taxon_id}", "proteins: $proteinsCount",  "unique: $uniqueProteinsCount", "mapped : $mappedProteinsCount", "genes: $genesCount", "ignored genes: $doNotUseGenes", $org);
print STDERR join("\t", @report) . "\n";

sub usage {
  die "

Parse Uniprot text file (genbank format) to find Entrez and Ensembl gene IDs for each protein, as available.

Usage: getUniprotGeneIdMap ncbi_taxon_id uniprot_proteome_id output_mapping_file [organism_name]

Where:
  output_mapping_file:  a tab-delimited file, first column protein ID, next column gene ID
  organism_name: used just for reporting at the end

Calls this to get the text file:
  wget \"http://www.uniprot.org/uniprot/?query=proteome:UP000000799+AND+taxonomy:192222&format&format=txt\" -qO- 


The approach is to read the large genbank-like text file (input from uniprot), and find the mapping of gene IDs
to proteins. 

Find a representative gene for each set of genes formed by transitive closure on the genes assigned to proteins.  All gene IDs that transtivily share a set of proteins is considered a single gene, and is represented by an arbitrary member of the set of genes.

";
}
