#!/usr/bin/perl

use strict;

usage() if scalar(@ARGV) != 2; 

my ($output_map_file, $output_protein_groups_file) = @ARGV;

=head
AC   Q7ZVB2; Q6NYB3;
DR   Ensembl; ENSDART00000100283; ENSDARP00000091056; ENSDARG00000069100.
DR   Ensembl; ENSDART00000137838; ENSDARP00000118280; ENSDARG00000069100.
DR   GeneID; 100005587; -.
//
AC   Q802W2; A2AWD6;
DR   Ensembl; ENSDART00000053868; ENSDARP00000053867; ENSDARG00000037061.
DR   GeneID; 399481; -.
//
AC   Q8JG69;
DR   GeneID; 266755; -.
//
AC   Q8JG70;
//
=cut

# we want to find entrez,ensembl gene pairs that always come together.  these will be considered a single gene
# for each gene, track the proteins it is found in (for those proteins that have both entrez and ensembl genes)
my %gene2proteins;

my @localAccessions;
my %localGenes;
my @localEntrezGenes;
my @localEnsemblGenes;
open(M, ">$output_map_file") || die "Can't open output map file '$output_map_file' for writing\n";
while(<STDIN>) {
  chomp;

  # handle a new set of accessions
  if (/^AC/) {
    my $line = $_;
    my @a = split(/\s+/, $line);
    shift(@a);  #lose AC
    @localAccessions = map { s/;//; $_; } @a;  # lose trailing semi-colon on accessions
    %localGenes = ();
  }

  # an entrez gene ID
  elsif (/^DR\s+GeneID/) {
    /^DR\s+GeneID;\s+(\d+);\s+\-\.$/ || die "DR GeneID line not in expected format\n$_\n";
    $localGenes{$1} = 1;
  }

  # an ensembl gene ID
  elsif (/^DR\s+Ensembl/) {
    /^DR\s+Ensembl;.+(ENS\w+G\d+)\./ || die "DR Ensembl line not in expected format\n$_\n";
    $localGenes{$1} = 1;
  }

  # process this completed record
  elsif (/^\/\//) {
    my $geneStr = join("\t", sort(keys(%localGenes)));
    foreach my $acc (@localAccessions) {
      if ($geneStr) {
	print M "$acc\t$geneStr\n";
      } else {
	print M "$acc\n";
      }
      foreach my $geneId (keys(%localGenes)) {
	  push(@{$gene2proteins{$geneId}}, $acc);
      }
    }
  }
}
close(M);

# print non-redundant set of protein groups
open(P, ">$output_protein_groups_file") || die "Can't open protein groups file '$output_protein_groups_file' for writing\n";
my %redundant;
foreach my $geneId (keys(%gene2proteins)) {
    my @sorted = sort @{$gene2proteins{$geneId}};
    my $key = join("\t", @sorted);
    if (!$redundant{$key}) {
	map { print P "$_\t$geneId\n" } @sorted;
	$redundant{$key} = 1;
    }
}


sub usage {
  die "

Parse Uniprot text file (genbank format) to find Entrez and Ensembl gene IDs for each protein, as available.

Usage:  wget \"http://www.uniprot.org/uniprot/?fil=taxonomy:7955&format=txt\" -qO- | egrep \"^(AC|DR\s+Ensembl|DR\s+GeneID|//)\" | getUniprotGeneIdMap output_mapping_file output_protein_groups_file

Where:
  output_mapping_file:  a tab-delimited file, first column protein ID, next columns gene IDs
  output_protein_groups_file: a tab-delimited file of groups of proteins that belong to a non-redundant gene

The approach is to read the large genbank-like text file (input from uniprot), and find the mapping of gene IDs
to proteins. 

Then, convert that to proteins to gene id (where it is possible that more than one gene id has the same group of proteins).  Collapse that into a non-redundant list of protein groups.

";
}
