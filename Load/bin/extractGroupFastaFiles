#!@perl@

## dumps sequences from dots.aasequence for each ortho group into individual files 


use strict;

use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use GUS::ObjRelP::DbiDatabase;
use CBIL::Bio::SequenceUtils;
use GUS::Supported::GusConfig;

my ($gusConfigFile,$debug,$verbose,$outDir,$tarBall, $minGroupSize, $maxGroupSize, $peripheralsOnly);

$minGroupSize =1;
$maxGroupSize =10000000;
&GetOptions("verbose!"=> \$verbose,
            "outputDir=s" => \$outDir,
            "gusConfigFile=s" => \$gusConfigFile,
            "minGroupSize=i" => \$minGroupSize,
            "maxGroupSize=i" => \$maxGroupSize,
            "peripheralsOnly!" => \$peripheralsOnly,
	    "tarBall=i" => \$tarBallSize);

if(!$outDir){
	die "usage: extractgroupFastaFiles --outputDir <outputDirectory> --tarBall <number of seqs per tarball, default no tarballs> [--minGroupSize minSz] [--maxGroupSize maxSz] [--peripheralsOnly] --verbose --gusConfigFile [\$GUS_HOME/config/gus.config]\n";
}

my $cmd = "mkdir -p $outDir";
system($cmd) && die "Failed running cmd\n$cmd";

print STDERR "Establishing dbi login\n" if $verbose;
my $gusconfig = GUS::Supported::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
					$gusconfig->getReadOnlyDatabaseLogin(),
					$gusconfig->getReadOnlyDatabasePassword,
					$verbose,0,1,
					$gusconfig->getCoreSchemaName,
					$gusconfig->getOracleDefaultRollbackSegment());

my $dbh = $db->getQueryHandle();

$dbh->{LongReadLen} = 8192 * 1024;

my $fileNames = &getGroupNames($minGroupSize, $maxGroupSize);

&makeFiles($fileNames, $peripheralsOnly, $outDir);

&makeTarBalls($fileNames, $tarBallSize, $outDir) if $tarBallSize;


#####################################################################################


sub getGroupNames {
  my ($minGroupSize, $maxGroupSize) = @_;

  my $groupSQL = "select name, ortholog_group_id, number_of_members from apidb.OrthologGroup where number_of_members <= $maxGroupSize and number_of_members > $minGroupSize";

  my $idStmt = $dbh->prepareAndExecute($groupSQL);

  my %files;

  while(my (@row) = $idStmt->fetchrow_array()){
    $files{$row[0]}{'id'} = $row[1];
    $files{$row[0]}{'num'} = $row[2];
  }


  my $num = scalar (keys %files);
  print STDERR ("$groupSQL\n   $num groups returned\n");

  return \%files;
}

sub makeFiles {
  my ($fileNames, $peripheralsOnly, $outDir) = @_;

my $peripheralsOnlyFromClause= "";
my $peripheralsOnlyWhereClause = "";

  if ($peripheralsOnly) {
    $peripheralsOnlyFromClause = ", sres.externaldatabaserelease edr, sres.externaldatabase ed, apidb.datasource ds";

    $peripheralsOnlyWhereClause =
"and x.external_database_release_id = edr.external_database_release_id
and ed.external_database_id = edr.external_database_id
and ds.external_database_name = ed.name
and ds.subtype = 'peripheral'";
  }

  my $seqSQL = "
select ot.three_letter_abbrev || '|' || x.source_id, x.sequence
from dots.externalaasequence x, apidb.orthomcltaxon ot, apidb.orthologgroupaasequence g $peripheralsOnlyFromClause
where g.aa_sequence_id = x.aa_sequence_id
and x.taxon_id = ot.taxon_id
$peripheralsOnlyWhereClause
and g.ortholog_group_id = ?";

  my $seqStmt = $dbh->prepare($seqSQL);

  my $num = 0;

  foreach my $name (keys %{$fileNames}) {

    open(FILE, ">$outDir/$name.fasta");

    $seqStmt->execute($fileNames->{$name}->{'id'});

    while(my (@row) = $seqStmt->fetchrow_array()){

      my $defline = "\>".$row[0]."\n";
      my $sequence = $row[1];

      print FILE $defline . CBIL::Bio::SequenceUtils::breakSequence($sequence,60);

    }

    $num++;

    print STDERR ("$num fasta files printed\n") if $num % 1000 == 0;

    close(FILE);

  }

  print STDERR ("$num fasta files printed\n");
}

sub makeTarBalls {
  my ($fileNames, $tarBallSize, $outDir) = @_;
  my $num = 0;

  my @tarFiles;

  my $tarNum = 1;

  my $fileNum;

  chdir $outDir || die "Can't change directory to $outDir\n";
  foreach  my $file (keys %{$fileNames}) {
    $num += $fileNames->{$file}->{'num'};
    push (@tarFiles,"$file");
    if ($num >= $tarBallSize || scalar(@tarFiles) > 1000) {      # limit tar size by number of seqs and, number of files (to not overrun command line)
      my $list = join (' ',@tarFiles);
      my $cmd = "tar -zcf $outDir/tarBall_${tarNum}.tar.gz $list";
      system($cmd) && die "Failed running cmd\n$cmd";
      $cmd = "rm -f $list";
      system($cmd) && die "Failed running cmd\n$cmd";
      @tarFiles=();
      $num = 0;
      $tarNum++;
    }
    $fileNum++;
  }

  my $list = join (' ',@tarFiles);
  my $cmd = "tar -zcf $outDir/tarBall_${tarNum}.tar.gz $list";
  system($cmd) && die "Failed running cmd\n$cmd";
  $cmd = "rm -f $list";
  system($cmd) && die "Failed running cmd\n$cmd";

  print STDERR ("$fileNum fasta files used to make tar balls\n");
}
