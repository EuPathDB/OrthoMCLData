#!@perl@

## dumps sequences from dots.aasequence for each ortho group into individual files 


use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use GUS::ObjRelP::DbiDatabase;
use CBIL::Bio::SequenceUtils;
use GUS::Supported::GusConfig;

my ($gusConfigFile,$debug,$verbose,$outDir,$tarBall);
&GetOptions("verbose!"=> \$verbose,
            "outputDir=s" => \$outDir,
            "gusConfigFile=s" => \$gusConfigFile,
	    "tarBall=i" => \$tarBall);

if(!$outDir){
	die "usage: extractgroupFastaFiles --outputDir <outputDirectory> --tarBall <number of seqs per tarball, default no tarballs> --verbose --gusConfigFile [\$GUS_HOME/config/gus.config]\n";
}


print STDERR "Establishing dbi login\n" if $verbose;
my $gusconfig = GUS::Supported::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
					$gusconfig->getReadOnlyDatabaseLogin(),
					$gusconfig->getReadOnlyDatabasePassword,
					$verbose,0,1,
					$gusconfig->getCoreSchemaName,
					$gusconfig->getOracleDefaultRollbackSegment());

my $dbh = $db->getQueryHandle();

$dbh->{LongReadLen} = 8192 * 1024;

my $fileNames = &getGroupNames;

&makeFiles;

&makeTarBalls if $tarBall;





sub getGroupNames {

  my $groupSQL = "select name, ortholog_group_id, number_of_members from apidb.OrthologGroup where number_of_members <= 100 and number_of_members > 1";

  my $idStmt = $dbh->prepareAndExecute($groupSQL);

  my %files;

  while(my (@row) = $idStmt->fetchrow_array()){
    $files{$row[0]}{'id'} = $row[1];
    $files{$row[0]}{'num'} = $row[2];
  }

  return \%files;
}

sub makeFiles {

  my $seqSQL = "select ot.three_letter_abbrev || '|' || x.source_id, x.sequence from dots.externalaasequence x, apidb.orthomcltaxon ot,apidb.orthologgroupaasequence g where g.aa_sequence_id = x.aa_sequence_id and x.taxon_id = ot.taxon_id and g.ortholog_group_id = ?";

  my $seqStmt = $dbh->prepare($seqSQL);

  foreach my $name (keys %{$fileNames}) {

    open(FILE, ">$outDir/$name");

    $seqStmt->execute($fileNames->{$name}->{'id'});

    while(my (@row) = $seqStmt->fetchrow_array()){

      my $defline = "\>".$row[0]."\n";
      my $sequence = $row[1];

      print FILE $defline . CBIL::Bio::SequenceUtils::breakSequence($sequence,60);
    }
    close(FILE);

  }
}

sub makeTarBalls {

  my $num = 0;

  my @tarFiles;

  my $tarNum = 1;

  opendir(DIR, $outDir) || die "Can't open directory '$outDir'";

  while (defined (my $file = readdir (DIR))) {
    next if ($file eq "." || $file eq "..");
    $num += $fileNames->{$file}->{'num'};
    push (@tarFiles,"$outDir/$file");
    if ($num >= $tarBall) {
      my $list = join (' ',@tarFiles);
      `tar -xcf "$outDir/tarrBall_${tarNum}.tar.gz $list`;
      `rm -f $list`;
      @tarFiles=();
      $num = 0;
      $tarNum++;
    }
  }

  my $finalList = join (' ',@tarFiles);
  `tar -xcf "$outDir/tarrBall_${tarNum}.tar.gz $finalList`;

  closedir(DIR);

}
