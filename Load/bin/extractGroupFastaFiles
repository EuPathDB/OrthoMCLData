#!/usr/bin/perl

## dumps sequences from dots.aasequence for each ortho group into individual files 


use strict;

use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use GUS::ObjRelP::DbiDatabase;
use CBIL::Bio::SequenceUtils;
use GUS::Supported::GusConfig;

my ($gusConfigFile,$debug,$verbose,$outDir,$tarBallSize, $minGroupSize, $maxGroupSize, $groupTypesCPR, $samplingOfSeqs);

$minGroupSize = 2;
$maxGroupSize = 10000000;
&GetOptions("verbose!"=> \$verbose,
            "outputDir=s" => \$outDir,
            "gusConfigFile=s" => \$gusConfigFile,
            "minGroupSize=i" => \$minGroupSize,
            "maxGroupSize=i" => \$maxGroupSize,
            "groupTypesCPR=s" => \$groupTypesCPR,
            "samplingOfSeqs=s" => \$samplingOfSeqs,
	    "tarBall=i" => \$tarBallSize);

if(!$outDir){
	die "usage: extractgroupFastaFiles --outputDir <outputDirectory> --tarBall <number of seqs per tarball, default no tarballs> [--minGroupSize minSz] [--maxGroupSize maxSz] --groupTypesCPR $groupTypesCPR --verbose --samplingOfSeqs $samplingOfSeqs --gusConfigFile [\$GUS_HOME/config/gus.config]\n";
}

if ( $groupTypesCPR !~ /^[CPRcpr]{1,3}$/ ) {
    die "The orthoGroup type must consist of C, P, and/or R. The value is currently '$groupTypesCPR'\n";
}
if ( $samplingOfSeqs =~ /^[Yy]/ ) {
    $samplingOfSeqs = 1;
} else {
    $samplingOfSeqs = 0;
}

my $cmd = "mkdir -p $outDir";
system($cmd) && die "Failed running cmd\n$cmd";

print STDERR "Establishing dbi login\n" if $verbose;
my $gusconfig = GUS::Supported::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
					$gusconfig->getReadOnlyDatabaseLogin(),
					$gusconfig->getReadOnlyDatabasePassword,
					$verbose,0,1,
					$gusconfig->getCoreSchemaName,
					$gusconfig->getOracleDefaultRollbackSegment());

my $dbh = $db->getQueryHandle();

$dbh->{LongReadLen} = 8192 * 1024;

my $fileNames = &getGroupNames($minGroupSize, $maxGroupSize, $groupTypesCPR, $samplingOfSeqs);

&makeFiles($fileNames, $outDir, $maxGroupSize, $samplingOfSeqs);

&makeTarBalls($fileNames, $tarBallSize, $outDir) if $tarBallSize;


#####################################################################################


sub getGroupNames {
  my ($minGroupSize, $maxGroupSize, $groupTypesCPR, $samplingOfSeqs) = @_;

  my %types = map { $_ => 1 } split('',uc($groupTypesCPR));
  my $text = join("','",keys %types);
  $text = "('$text')";

  my $maxText = "number_of_members <= $maxGroupSize and ";
  if ($samplingOfSeqs) {
      $maxText = "";
  }

  my $groupSQL = "select name, ortholog_group_id, number_of_members from apidb.OrthologGroup where ".$maxText."number_of_members >= $minGroupSize and core_peripheral_residual in $text";

  my $idStmt = $dbh->prepareAndExecute($groupSQL);

  my %files;

  while(my (@row) = $idStmt->fetchrow_array()){
    $files{$row[0]}{'id'} = $row[1];
    $files{$row[0]}{'num'} = $row[2];
  }

  my $num = scalar (keys %files);
  print STDERR ("$groupSQL\n   $num groups returned\n");

  return \%files;
}

sub makeFiles {
    my ($fileNames, $outDir, $maxGroupSize, $samplingOfSeqs) = @_;

    my $seqSQL = "
select eas.secondary_identifier, eas.sequence                                                                               
from dots.externalaasequence eas, apidb.orthologgroupaasequence ogas                                                       
where ogas.aa_sequence_id = eas.aa_sequence_id
    and ogas.ortholog_group_id = ?";

  my $seqStmt = $dbh->prepare($seqSQL);

  my $numFiles = 0;

  foreach my $name (keys %{$fileNames}) {

      next if ( !$samplingOfSeqs && ($fileNames->{$name}->{'num'} > $maxGroupSize) );
    
      open(FILE, ">$outDir/$name");

      $seqStmt->execute($fileNames->{$name}->{'id'});

      my $numSeqs = 1;

      while(my (@row) = $seqStmt->fetchrow_array()){
	  last if ( $numSeqs > $maxGroupSize );
	  my $defline = "\>".$row[0]."\n";
	  my $sequence = $row[1];
	  my $seqLength = length($sequence);
	  next if (($fileNames->{$name}->{'num'} > 10) && ($seqLength > 20000)); #MUSCLE has difficulty aligning many big sequences
	  print FILE $defline . CBIL::Bio::SequenceUtils::breakSequence($sequence,60);
	  $numSeqs++;
      }
      
      $numFiles++;
      
      print STDERR ("$numFiles fasta files printed\n") if $numFiles % 1000 == 0;
      
      close(FILE);
      
  }

    print STDERR ("$numFiles fasta files printed\n");
}

sub makeTarBalls {
  my ($fileNames, $tarBallSize, $outDir) = @_;
  my $numSeqs = 0;

  my @tarFiles;

  my $tarNum = 1;

  my $fileNum = 0;

  chdir $outDir || die "Can't change directory to $outDir\n";
  foreach  my $file (keys %{$fileNames}) {
    $numSeqs += $fileNames->{$file}->{'num'};
    push (@tarFiles,"$file");
    if ( ($numSeqs >= $tarBallSize) || (scalar(@tarFiles) >= 50) ) {      # limit tar size by number of seqs and, number of files (to not overrun command line)
      my $list = join (' ',@tarFiles);
      my $cmd = "tar -zcf $outDir/tarBall_${tarNum}.tar.gz $list";
      system($cmd) && die "Failed running cmd\n$cmd";
      $cmd = "rm -f $list";
      system($cmd) && die "Failed running cmd\n$cmd";
      @tarFiles=();
      $numSeqs = 0;
      $tarNum++;
    }
    $fileNum++;
  }

  if (scalar(@tarFiles)>0) {
      my $list = join (' ',@tarFiles);
      my $cmd = "tar -zcf $outDir/tarBall_${tarNum}.tar.gz $list";
      system($cmd) && die "Failed running cmd\n$cmd";
      $cmd = "rm -f $list";
      system($cmd) && die "Failed running cmd\n$cmd";
  }

  print STDERR ("$fileNum fasta files used to make tar balls\n");
}
